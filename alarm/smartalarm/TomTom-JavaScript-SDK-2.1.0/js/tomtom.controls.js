tomtom.define("text!templates/controls/RouteControl.html",[],function(){return'<div class="tt-route-control">\r\n	\r\n	<div class="tt-route-control-parameters">\r\n	\r\n		<div class="tt-error"></div>\r\n	\r\n		<div class="tt-control-row">\r\n			<label>{fromLabel}</label>\r\n			<div class="tt-control-data">\r\n				<input class="tt-control-text" type="text" name="routeFrom" />\r\n			</div>\r\n		</div>\r\n		\r\n		<div class="tt-control-row">\r\n			<label>{toLabel}</label>\r\n			<div class="tt-control-data">\r\n				<input class="tt-control-text" type="text" name="routeTo" />\r\n			</div>\r\n		</div>\r\n		\r\n		<div class="tt-control-row">\r\n			<label>{trafficLabel}</label>\r\n			<div class="tt-control-data">\r\n				<input type="checkbox" name="routeTraffic" id="traffic_${controlId}" checked="checked" />\r\n				<label for="traffic_${controlId}">{minimizeDelays}</label>\r\n			</div>\r\n		</div>\r\n		\r\n		<div class="tt-control-row">\r\n			<label>{leaveLabel}</label>\r\n			<div class="tt-control-data">\r\n				<div>\r\n					<select name="routeLeaveAt">\r\n						<option value="NOW">{rightNow}</option>\r\n						<option value="LATER_TODAY">{laterToday}</option>\r\n						<option value="TOMORROW_AT">{tomorrowAt}</option>\r\n						<option value="SPECIFIC_TIME">{specificDayAndTime}</option>\r\n						<option value="NO_SPECIFIC_TIME">{noSpecificDayAndTime}</option>\r\n					</select>\r\n				</div>\r\n				<div>\r\n					<select name="routeDay" disabled="disabled">\r\n						<option value="today">{today}</option>\r\n						<option value="monday">{monday}</option>\r\n						<option value="tuesday">{tuesday}</option>\r\n						<option value="wednesday">{wednesday}</option>\r\n						<option value="thursday">{thursday}</option>\r\n						<option value="friday">{friday}</option>\r\n						<option value="saturday">{saturday}</option>\r\n						<option value="sunday">{sunday}</option>\r\n					</select>\r\n					\r\n					<select name="routeTime" disabled="disabled"></select>\r\n				</div>\r\n			</div>\r\n		</div>\r\n		\r\n		<div class="tt-control-buttons">\r\n			<button class="tt-route-control-planRoute">{planRoute}</button>\r\n		</div>\r\n		\r\n	</div>\r\n		\r\n	<div class="tt-route-control-information">\r\n		<div class="tt-route-control-summary">\r\n			\r\n		</div>\r\n		\r\n		<ul class="tt-route-control-instructions">\r\n		\r\n		</ul>\r\n	</div>\r\n\r\n</div>'}),tomtom.define("text!templates/controls/RouteControl_summary.html",[],function(){return"<p>{distance} - {time}</p>\r\n<p>{trafficDelayLabel} {trafficDelay}</p>"}),tomtom.define("text!templates/controls/RouteControl_instruction.html",[],function(){return'<div class="tt-route-control-icon"><img src="{iconUrl}" alt="direction" /></div>\r\n<div class="tt-route-control-instructionText">\r\n	{instruction}\r\n	<span class="roadNumber{roadNumberClass}">{roadNumber}</span>\r\n	<span class="road">{roadName}</span>\r\n</div>\r\n<div class="tt-route-control-distance">{distance}</div>'}),tomtom.define("controls/AutoComplete",["../BaseObject","../Utils","../dom/DomUtil","../Main"],function(e,t,n){tomtom.controls.AutoComplete=e.extend({includes:L.Mixin.Events,initialize:function(t,r,i){this.textBox=t,this._timeoutId=0,this._resultsCallback=r,this._itemSelectedCallback=i,this._listIndex=0,this._eventHandles=[],e.prototype.initialize.apply(this,arguments);var s=document.createElement("div");L.DomEvent.on(this.textBox,"keyup",this._inputKeyUp,this),L.DomEvent.on(this.textBox,"keydown",this._inputKeyDown,this),L.DomEvent.on(document,"click",this._documentClick,this),this.textBox.parentNode.appendChild(s),this.div=s,this.list=document.createElement("ul"),n.addClass(this.div,"tt-autocomplete"),s.appendChild(this.list),i&&this.on("itemSelected",i,this)},destroy:function(){e.prototype.destroy.apply(this,arguments),L.DomEvent.off(this.textBox,"keyup",this._inputKeyUp,this),L.DomEvent.off(this.textBox,"keydown",this._inputKeyDown,this),L.DomEvent.off(document,"click",this._documentClick,this)},clear:function(){while(this.list.children.length>0)this.list.removeChild(this.list.children[0])},processResults:function(e){if(this._lostFocus){this._lostFocus=!1;return}this.clear();if(e.length==1){this._itemSelected(!1,e[0]);return}if(e.length===0)return;for(var t=0;t<e.length;t++){var r=e[t],i=document.createElement("li");i.innerHTML=r.text,n.data(i,"tt_autoComplete_result",r),L.DomEvent.on(i,"click",this._itemClicked(i),this),L.DomEvent.on(i,"mouseover",this._mouseOver(i),this),this.list.appendChild(i)}n.addClass(this.list.childNodes[0],"selected"),this.show()},show:function(){this.div.style.display="block"},hide:function(){this.div.style.display="none"},cancel:function(){clearTimeout(this._timeoutId)},_itemClicked:function(e){return function(t){return t.preventDefault(),t.stopPropagation(),this._itemSelected(!0,n.data(e,"tt_autoComplete_result")),!1}},_mouseOver:function(e){return function(){n.removeClass(this.list.childNodes,"selected"),n.addClass(e,"selected")}},_inputKeyDown:function(e){var t=e.keyCode?e.keyCode:e.which;t==9&&this.hide()},_inputKeyUp:function(e){this._lostFocus=!1,clearTimeout(this._timeoutId);var t=e.keyCode?e.keyCode:e.which,s=n.query(".selected",this.list);if(t==38){var o=s.prev().first();return o&&(n.removeClass(this.list.childNodes,"selected"),n.addClass(o,"selected"),this._updateSelected()),L.DomEvent.stop(e),!1}if(t==40){var u=s.next().first();return u&&(n.removeClass(this.list.childNodes,"selected"),n.addClass(u,"selected"),this._updateSelected()),L.DomEvent.stop(e),!1}if(t==13)return s=n.query(".selected",this.list),s.length()&&this._itemSelected(!0,s.data("tt_autoComplete_result")),L.DomEvent.stop(e),!1;t==27?this.hide():n.val(this.textBox).length>i?this._timeoutId=setTimeout(L.Util.bind(function(){this._resultsCallback(this.textBox.value,L.Util.bind(this.processResults,this))},this),r):this.hide()},_updateSelected:function(){var e=n.query(".selected",this.list),t=e.get().offsetTop;t+e.offsetHeight()>=this.div.offsetHeight+this.div.scrollTop?this.div.scrollTop=t+e.offsetHeight()-this.div.offsetHeight:t<this.div.scrollTop&&(this.div.scrollTop=t)},_documentClick:function(){this._lostFocus=!0,this.hide()},_itemSelected:function(e,t){this.hide(),e&&(this.textBox.value=t.text),this.value=t.value,this.fire("itemSelected",{textBox:this.textBox,value:t.value})}});var r=500,i=3;return tomtom.controls.RouteControl}),tomtom.define("controls/RouteControl",["text!templates/controls/RouteControl.html","../Utils","text!templates/controls/RouteControl_summary.html","text!templates/controls/RouteControl_instruction.html","../dom/DomUtil","../Main","./AutoComplete","../Map"],function(e,t,n,r,i){tomtom.controls.RouteControl=L.Class.extend({initialize:function(e){this.markers=null,this._geocodeTimeoutId=0,this._fromAutoComplete=null,this._toAutoComplete=null,this._eventHandles=[],this.log=new tomtom.Logger,this._container=i.create(L.DomUtil.get(e.domNode)),this.setMap(e.map),this.draw()},draw:function(){this._bundle=new tomtom.StringBundle("Controls");var n=this._bundle.getString("time_type")=="12";this.controlId=t.getUniqueControlId("RouteControl"),this._container.html(L.Util.template(e,{controlId:this.controlId,fromLabel:this._bundle.getString("route_planner_label_for_departure"),toLabel:this._bundle.getString("route_planner_label_for_destination"),trafficLabel:this._bundle.getString("avoid_traffic_label_text"),minimizeDelays:this._bundle.getString("tripAdvisor_avoid_traffic_text"),leaveLabel:this._bundle.getString("tripAdvisor_leaving"),rightNow:this._bundle.getString("tripAdvisor_rightnow"),tomorrowAt:this._bundle.getString("tripAdvisor_tomorrow"),laterToday:this._bundle.getString("tripAdvisor_today"),specificDayAndTime:this._bundle.getString("tripAdvisor_otherdatetime"),noSpecificDayAndTime:this._bundle.getString("tripAdvisor_nospecificdaytime"),today:this._bundle.getString("cal_today"),monday:this._bundle.getString("cal_monday"),tuesday:this._bundle.getString("cal_tuesday"),wednesday:this._bundle.getString("cal_wednesday"),thursday:this._bundle.getString("cal_thursday"),friday:this._bundle.getString("cal_friday"),saturday:this._bundle.getString("cal_saturday"),sunday:this._bundle.getString("cal_sunday"),planRoute:this._bundle.getString("button_plan_trip")})),this._fromNode=this._container.find("input[name='routeFrom']"),this._toNode=this._container.find("input[name='routeTo']"),this._routeTimeNode=this._container.find("select[name='routeTime']"),this._planRouteNode=this._container.find("button.tt-route-control-planRoute"),this._dayNode=this._container.find("select[name='routeDay']"),this._leaveAtNode=this._container.find("select[name='routeLeaveAt']"),this._timeNode=this._container.find("select[name='routeTime']"),this._avoidTrafficNode=this._container.find("input[name='routeTraffic']"),this._routeInformationNode=this._container.find(".tt-route-control-information"),this._summaryNode=this._container.find(".tt-route-control-summary"),this._instructionsNode=this._container.find(".tt-route-control-instructions"),this._errorContainer=this._container.find(".tt-error"),this._fromAutoComplete=new tomtom.controls.AutoComplete(this._fromNode.get(0),L.Util.bind(this._getAutocompleteResults,this),L.Util.bind(this._autoCompleteItemSelected,this)),this._toAutoComplete=new tomtom.controls.AutoComplete(this._toNode.get(0),L.Util.bind(this._getAutocompleteResults,this),L.Util.bind(this._autoCompleteItemSelected,this));var r=this._routeTimeNode;r.empty();for(var s=0;s<1440;s+=30){var o=Math.floor(s/60),u=o+12,a=t.zeroPad(s%60,2),f="am";n?(u>12&&(u-=12),o>12&&(f="pm",u-=12)):u==12?u=0:u>12&&(u-=12);var l=i.create("option");l.val(s),l.html(u+":"+a+(n?" "+f:"")),r.append(l)}return this._planRouteNode.on("click",this._routeClick,this),this._fromNode.on("keyup",this._inputKeyUp,this),this._toNode.on("keyup",this._inputKeyUp,this),this._dayNode.on("change",this._dayChange,this),this._leaveAtNode.on("change",this._leaveAtChange,this),this._container.addClass("tt-route-control-wrapper"),this._container},destroy:function(){this._planRouteNode.off("click",this._routeClick),this._fromNode.off("keyup",this._inputKeyUp),this._toNode.off("keyup",this._inputKeyUp),this._dayNode.off("change",this._dayChange),this._leaveAtNode.off("change",this._leaveAtChange),this._fromAutoComplete.destroy(),this._toAutoComplete.destroy()},setMap:function(e){this.apiKey=e.apiKey,this.map=e,this.markers=L.layerGroup().addTo(e),this.map.on("routeend",this._routeCallback,this)},_dayChange:function(){var e=i.val(this._dayNode),t=this._leaveAtNode;e=="today"?i.val(t,"LATER_TODAY"):i.val(t,"SPECIFIC_TIME")},_leaveAtChange:function(){var e=this._leaveAtNode.val(),t=this._dayNode;if(e=="NOW"||e=="NO_SPECIFIC_TIME")this._dayNode.attr("disabled","disabled"),this._timeNode.attr("disabled","disabled");else{this._dayNode.removeAttr("disabled"),this._timeNode.removeAttr("disabled");var n=new Date;e=="TOMORROW_AT"?(n.setDate(n.getDate()+1),t.value=o[n.getDay()]):e=="LATER_TODAY"&&(t.value="today")}},displayRoute:function(){this._routeClick()},_routeClick:function(){this._errorContainer.html(""),this._errorContainer.hide(),this._triggeredByControl=!0;var e=this._fromAutoComplete.value,t=this._toAutoComplete.value;e||(e=this._fromNode.val()),t||(t=this._toNode.val());if(e&&t){var n=this._leaveAtNode.val(),r=n!="NO_SPECIFIC_TIME"&&n!="NOW",i=this._dayNode.val(),s=this._timeNode.val(),o={includeTraffic:!0,avoidTraffic:this._avoidTrafficNode.get(0).checked,iqRoutes:r?2:0};r&&(o.day=i,o.time=s),e.indexOf("@")===0&&(e=this._parseLatLngPair(e)),t.indexOf("@")===0&&(t=this._parseLatLngPair(t)),this.map.displayRoute([e,t],o)}else this._displayError(this._bundle.getString("planroute_noinput_error"))},_displayError:function(e){this._errorContainer.html(e),this._errorContainer.show()},_parseLatLngPair:function(e){var t=e.substring(1).split(",");return new L.LatLng(parseFloat(t[0]),parseFloat(t[1]))},_routeCallback:function(e){var s=this._currentRoute=e;this.markers.clearLayers();if(s){var o=this._instructionsNode,u=this._summaryNode,a=s.instructions,f=new tomtom.StringBundle("Controls"),l=s.summary;if(l){var c=t.formatSeconds(l.totalTimeSeconds),h=t.formatSeconds(l.totalDelaySeconds),p={distance:tomtom.StringBundle.getString("units.distance",null,l.totalDistanceMeters),time:c.value+" "+tomtom.StringBundle.getString("units.time."+c.suffix,null,c.value),trafficDelay:h.value+" "+tomtom.StringBundle.getString("units.time."+h.suffix,null,h.value),trafficDelayLabel:f.getString("route_trafficdelay")};u.html(L.Util.template(n,p))}o.empty();if(a){var d=tomtom.baseImagePath,v=0;for(var m=0;m<a.length;m++){var g=a[m],y=i.create("li");y.html(L.Util.template(r,{instruction:g.text,roadName:g.roadName,roadNumber:g.roadNumber,distance:tomtom.StringBundle.getString("units.distance",null,g.distanceMeters),iconUrl:d+"instructions/"+g.iconPath,roadNumberClass:g.roadNumber?" sign":""})),o.append(y),y.on("click",this._instructionClick(g),this),v=g.distanceMeters}}this._routeInformationNode.show();if(!this._triggeredByControl){var b=s.instructions;this._fromNode.value="@"+b[0].point.latitude+","+b[0].point.longitude,this._toNode.value="@"+b[b.length-1].point.latitude+","+b[b.length-1].point.longitude}}else this._displayError(this._bundle.getString("route_unable_to_find"));this._triggeredByControl=!1},_instructionClick:function(e){return function(){var t=this._currentRoute.instructions?this._currentRoute.instructions.instruction:null;if(t){var n=t.indexOf(e);this.map.displayRouteInstruction(n)}}},_cancelEvent:function(){return!1},_autoCompleteItemSelected:function(e){this.displayRoutePoints(!0)},displayRoutePoints:function(e){this.markers.clearLayers();var t=null,n=null,r=this._toAutoComplete.value;this._fromNode.val().indexOf("@")===0?n=this._parseLatLngPair(this._fromNode.val()):n=this._fromAutoComplete.value,this._toNode.val().indexOf("@")===0?r=this._parseLatLngPair(this._toNode.val()):r=this._toAutoComplete.value,n&&(t=n,this.markers.addLayer(new tomtom.Marker(n,tomtom.Map.MARKER_OPTIONS_ROUTE_START))),r&&(t=r,this.markers.addLayer(new tomtom.Marker(r,tomtom.Map.MARKER_OPTIONS_ROUTE_END)));if(n&&r&&e){var i=new L.LatLngBounds;i.extend(n),i.extend(r),this.map.fitBounds(i)}else t&&e&&this.map.setView(t,s)},_getAutocompleteResults:function(e,t){var n=this.map.geocodingService;n.geocode(e,function(e){var n;if(e.geoResponse&&e.geoResponse.geoResult){var r=e.geoResponse.geoResult;if(r.length){var i=[];for(var s=0;s<r.length;s++)n=r[s].formattedAddress,i.push({text:n,value:[r[s].latitude,r[s].longitude]});t(i)}else n=r.formattedAddress,t([{text:n,value:[r.latitude,r.longitude]}])}})},_inputKeyUp:function(e){var t=e.keyCode?e.keyCode:e.which;t==13&&this._routeClick()}});var s=12,o=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];return L.Util.extend(tomtom.languages.en_US,{Controls:{avoid_traffic_label_text:"Traffic:",button_find:"Find location",button_plan_trip:"Plan route",cal_friday:"Friday",cal_saturday:"Saturday",cal_sunday:"Sunday",cal_thursday:"Thursday",cal_today:"Today",cal_tomorrow:"Tomorrow",cal_monday:"Monday",cal_tuesday:"Tuesday",cal_wednesday:"Wednesday",departure_comment:'e.g., "1600 Pennsylvania Ave NW, Washington, DC"',departure_not_found:"The starting point could not be found. Please check that the address has been entered correctly.",destination_not_found:"The destination could not be found. Please check that the address has been entered correctly.",did_you_mean:"Or did you mean...",find_location_comment:'e.g., "1600 Pennsylvania Ave NW, Washington, DC"',findlocation_noinput_error:"Please enter an address and then press Find location.",hide_panel_message:"Hide",leavenow_text:"Leave Now",location_label:"Location:",planroute_noinput_error:"Please enter an address for the starting point and/or destination and then press Plan Route.",route_planner_label_for_departure:"From:",route_planner_label_for_destination:"To:",route_trafficdelay:"Includes traffic delay:",route_unable_to_find:"Unable to calculate a route between these two locations",tripAdvisor_avoid_traffic_text:"Minimize delays",tripAdvisor_leaving:"Leave:",tripAdvisor_nospecificdaytime:"No specific day and time",tripAdvisor_otherdatetime:"Specific day and time...",tripAdvisor_rightnow:"Right now",tripAdvisor_today:"Later today",tripAdvisor_tomorrow:"Tomorrow at...",units_hours:"hrs",units_kilometers:"km",units_meters:"m",units_miles:"miles",units_minutes:"minutes",units_yards:"yds",wronginput_error:"The address could not be found. Please check that the address has been entered correctly.",time_type:"12"},General:{find_a_location:"Find a Location",plan_a_route:"Plan a Route",traffic:"Traffic"}}),tomtom.controls.RouteControl}),tomtom.define("text!templates/controls/TabContainer.html",[],function(){return'	<div class="tt-tab-container-header">\r\n	\r\n	</div>\r\n	\r\n	<div class="tt-tab-container-body">\r\n	\r\n	</div>'}),tomtom.define("controls/TabContainer",["../dom/DomUtil","text!../templates/controls/TabContainer.html"],function(e,t){return tomtom.controls.TabContainer=L.Class.extend({includes:L.Mixin.Events,initialize:function(n){this._selectedIndex=0,this._domNode=e.create(L.DomUtil.get(n.domNode)),this._domNode.html(t),this._domNode.addClass("tt-tab-container"),this._header=this._domNode.find(".tt-tab-container-header"),this._body=this._domNode.find(".tt-tab-container-body"),n.tabs&&n.tabs.forEach(function(e){this.addTab(e)},this),this.resize()},addTab:function(t){var n=e.create("div","tt-tab-outer").attr("data-tag",t.tag),r=e.create("div","tt-tab-inner").html(t.title);n.append(r),this._header.append(n),L.DomEvent.on(n.get(0),"click",function(){this.setSelectedTab(t.tag)},this);var i=e.create("div","tt-tab-body").html(t.content).attr("data-tag",t.tag);this._body.append(i),this._updateSelected()},updateTab:function(e,t){var n=this._getHeader(e),r=this._getBody(e);n&&r&&(n.find(".tt-tab-inner").html(t.title),r.html(t.content))},resize:function(){var e=this._body.offsetHeight()-this._body.height();this._body.css("height",this._domNode.offsetHeight()-this._header.offsetHeight()-this._header.offset().top-e+"px")},setSelectedTab:function(e){this._header.find(".tt-tab-selected").removeClass("tt-tab-selected"),this._getHeader(e).addClass("tt-tab-selected"),this._body.children().css("display","none"),this._getBody(e).css("display","block")},_getHeader:function(e){return this._header.find(".tt-tab-outer[data-tag='"+e+"']")},_getBody:function(e){return this._body.find(".tt-tab-body[data-tag='"+e+"']")},_updateSelected:function(){this.setSelectedTab(this._header.find(".tt-tab-outer:nth-child("+(this._selectedIndex+1)+")").attr("data-tag")),this._header.find(".tt-tab-outer-last").removeClass("tt-tab-outer-last"),this._header.find(".tt-tab-outer:last-child").addClass("tt-tab-outer-last")}}),tomtom.controls.TabContainer}),tomtom.define("services/HDTRegionsService",["./BaseService","../AjaxUtil","../Utils"],function(e,t,n){tomtom.services.HDTRegionsService=e.extend({initialize:function(t){e.prototype.initialize.apply(this,arguments)},getRegions:function(e,i){typeof e=="function"&&(i=e,e={}),this.apiKey&&(e.key=this.apiKey);var s=tomtom.services.HDTRegionsService.URL||r;tomtom.logApiCall("hdTrafficRegions"),tomtom.proxyUrl?t.getJSON({url:n.getServiceUrl(s,e),callback:i}):t.getJSONP({url:n.getServiceUrl(s+"p",e),callback:i,callbackParam:"jsonp"})}});var r="services/hdtRegions/3/json";return tomtom.services.HDTRegionsService}),tomtom.define("text!templates/controls/TrafficIncidentListControl.html",[],function(){return'<div class="tt-traffic-list-regions">\r\n\r\n	<h3>{availabilityLabel}</h3>\r\n	\r\n	<div class="tt-region-list"></div>\r\n\r\n</div>\r\n\r\n<div class="tt-traffic-list-incidents">\r\n	<div class="tt-traffic-list-header">\r\n		<div>\r\n			<span class="tt-traffic-incident-count">{incidentCount}</span>\r\n		</div>\r\n		<div>\r\n			{lengthLabel}<strong class="tt-traffic-length"></strong>\r\n		</div>\r\n	</div>\r\n	\r\n	<div class="tt-table">\r\n		<div class="tt-table-header-row">\r\n			<div class="tt-th-incidents" data-sort-column="r"><span>{reportsColumn}</span></div>\r\n			<div class="tt-th-length" data-sort-column="l"><span>{lengthColumn}</span></div>\r\n			<div class="tt-th-delay" data-sort-column="dl"><span>{delayColumn}</span></div>\r\n		</div>\r\n		<div class="tt-table-body"></div>\r\n	</div>\r\n</div>\r\n\r\n<div class="tt-traffic-list-paging">\r\n	<a class="tt-paging-previous" href="javascript:void(0);">{previous}</a>\r\n	<a class="tt-paging-next" href="javascript:void(0);">{next}</a>\r\n</div>'}),tomtom.define("text!templates/controls/TrafficIncidentListControl_row.html",[],function(){return'<div class="tt-row" data-incident-id="{id}" data-cluster-id="{parentId}">\r\n	<div class="tt-column tt-incident-icon" style="background-image: {icon};"></div>\r\n	<div class="tt-column tt-incident-description">\r\n		<strong>{r}</strong>\r\n		<div>{f}</div>\r\n		<div>{t}</div>\r\n	</div>\r\n	<div class="tt-column tt-incident-stat">{l}</div>\r\n	<div class="tt-column tt-incident-stat">{dl}</div>\r\n</div>'}),tomtom.define("controls/TrafficIncidentListControl",["../dom/DomUtil","../Utils","../TrafficMarker","../services/HDTRegionsService","text!../templates/controls/TrafficIncidentListControl.html","text!../templates/controls/TrafficIncidentListControl_row.html"],function(e,t,n,r,i,s){tomtom.controls.TrafficIncidentListControl=L.Class.extend({includes:L.Mixin.Events,initialize:function(t){var n=new tomtom.StringBundle("JournalingPanel.RegionList"),s=new tomtom.StringBundle("JournalingPanel.Summary"),u=new tomtom.StringBundle("JournalingPanel.IncidentList.headers"),a=new tomtom.StringBundle("common.UILabels");this._map=t.map,this._domNode=e.create(L.DomUtil.get(t.domNode)),this._domNode.html(L.Util.template(i,{availabilityLabel:L.Util.template(n.getString("availableCountries"),{hdtraffic:tomtom.StringBundle.getString("common.TomTom.HDTraffic.trademark")}),lengthLabel:s.getString("totalLength"),incidentCount:s.getString("reports",{count:0},0),reportsColumn:u.getString("reports"),lengthColumn:u.getString("length"),delayColumn:u.getString("delay"),next:a.getString("next"),previous:a.getString("previous")})),this._domNode.addClass("tt-traffic-list"),this._incidentsNode=this._domNode.find(".tt-traffic-list-incidents"),this._regionsNode=this._domNode.find(".tt-traffic-list-regions"),this._nextNode=this._domNode.find(".tt-paging-next"),this._previousNode=this._domNode.find(".tt-paging-previous"),this._nextNode.on("click",function(){this._pageNumber<this._currentIncidents.length/o&&(this._pageNumber++,this._updateIncidents(this._currentIncidents))},this),this._previousNode.on("click",function(){this._pageNumber>0&&(this._pageNumber--,this._updateIncidents(this._currentIncidents))},this),this._sortField="dl",this._sortDirection="desc";var f=this;this._incidentsNode.find(".tt-table-header-row div").on("click",function(){var t=e.attr(this,"data-sort-column");t==f._sortField?f._sortDirection=f._sortDirection=="asc"?"desc":"asc":(f._sortField=t,f._sortDirection="desc"),f._mapUpdate({})});var l=new r;l.getRegions(L.Util.bind(function(e){this._regions=e,this._map.getZoom()<7?this._displayRegions():(this._regionsNode.hide(),this._incidentsNode.show(),this._domNode.find(".tt-traffic-list-paging").show())},this)),this._map.on("trafficupdate",this._mapUpdate,this),this._map.on("moveend",this._mapMove,this)},destroy:function(){this._map.off("trafficupdate",this._mapUpdate,this),this._map.off("moveend",this._mapMove,this)},_mapUpdate:function(e){this._pageNumber=0;var n=e.incidents||this._currentIncidents;t.isArray(n)||(n=[n]),n=this._getAllIncidents(n),this._updateIncidents(n)},_updateIncidents:function(t){this._totalDistance=0,this._incidentsNode.find(".tt-table-body").empty();var n=0,r=this._pageNumber*o;this._currentIncidents=t,t=t.sort(L.Util.bind(function(e,t){var n=0;return e[this._sortField]==null?n=-1:t[this._sortField]==null?n=1:e[this._sortField]>t[this._sortField]?n=1:e[this._sortField]==t[this._sortField]?n=0:n=-1,this._sortDirection=="desc"&&(n==1?n=-1:n==-1&&(n=1)),n},this)),t.some(function(e,t){if(t>=r){if(!(n<o))return!0;this._addIncident(e),n++}},this);var i=this._incidentsNode.find(".tt-table-body .tt-row"),s=this;i.on("mouseover",function(){var t=e.attr(this,"data-incident-id"),n=e.attr(this,"data-cluster-id");clearTimeout(s._showPopupTimeout),s._showPopupTimeout=setTimeout(L.Util.bind(function(){s._showIncidentPopup(t,n)},s),1e3);var r=s._map.getTrafficMarkerByIncidentId(n?n:t);r&&(r._onMouseOver(),r.setZIndexOffset(1e3))}),i.on("mouseout",function(){var t=e.attr(this,"data-incident-id"),n=e.attr(this,"data-cluster-id");s._currentPopup&&s._map.closePopup(s._currentPopup),clearTimeout(s._showPopupTimeout);var r=s._map.getTrafficMarkerByIncidentId(n?n:t);r&&(r._onMouseOut(),r.setZIndexOffset(0))}),i.on("click",function(){s._zoomTo(e.attr(this,"data-incident-id"))}),this._pageNumber>0?this._previousNode.removeClass("tt-disabled"):this._previousNode.addClass("tt-disabled"),this._pageNumber+1<t.length/o?this._nextNode.removeClass("tt-disabled"):this._nextNode.addClass("tt-disabled"),this._domNode.find(".tt-traffic-list-paging").show();var u=this._incidentsNode.find(".tt-table-header-row");u.find(".tt-sort-asc, .tt-sort-desc").removeClass("tt-sort-asc").removeClass("tt-sort-desc"),u.find("div[data-sort-column='"+this._sortField+"']").addClass("tt-sort-"+this._sortDirection);var a=new tomtom.StringBundle("JournalingPanel.Summary");this._incidentsNode.find(".tt-traffic-incident-count").html(a.getString("reports",{count:"<strong>"+t.length+"</strong>"},t.length)),this._incidentsNode.find(".tt-traffic-length").html(tomtom.StringBundle.getString("units.distance",null,this._totalDistance)),this._regionsNode.hide(),this._incidentsNode.show()},_showIncidentPopup:function(e,t){var n=this._map.getTrafficMarkerByIncidentId(t?t:e);n&&(t?this._currentPopup=n._showIncidentPopup(this._getIncident(e)):(n.openPopup(),this._currentPopup=n._popup))},_getIncident:function(e){var t=null;return this._currentIncidents.forEach(function(n){n.id==e&&(t=n)},this),t},_zoomTo:function(e){var t=this._getIncident(e);t&&this._map.panTo([t.p.y,t.p.x])},_getAllIncidents:function(e){var t=[];return e.forEach(function(e){e.cpoi?e.cpoi.forEach(function(n){n.parentId=e.id,t.push(n)}):t.push(e)}),t},_addIncident:function(e){var t=tomtom.baseImagePath;isNaN(e.l)||(this._totalDistance+=e.l);var r=L.Util.extend({r:"",dl:"--",l:"--",d:"",f:"--",t:"--",parentId:"",icon:"url("+t+"traffic-icons/"+n.getCategoryString(e.ic)+"-"+n.getTypeString(e.ty)+".png)"},e);r.dl&&!isNaN(r.dl)&&(r.dl=Math.round(r.dl/60),r.dl+=" "+tomtom.StringBundle.getString("units.time.minute",null,r.dl)),r.l&&!isNaN(r.l)&&(r.l=tomtom.StringBundle.getString("units.distance",null,r.l)),this._incidentsNode.find(".tt-table-body").append(L.Util.template(s,r))},_mapMove:function(){this._map.getZoom()<7&&(this._regionsNode.show(),this._incidentsNode.hide(),this._domNode.find(".tt-traffic-list-paging").hide(),this._displayRegions())},_displayRegions:function(){var n=this._regions.hdtRegionsResponse.hdtRegions;this._regionsNode.find(".tt-region-list").empty(),n.forEach(function(n){var r=e.create("div","tt-region"),i=e.create("h3");i.html(n.name),r.append(i),this._regionsNode.find(".tt-region-list").append(r),t.isArray(n.hdtRegions)?n.hdtRegions.forEach(function(e){this._createCountryNode(e,r)},this):this._createCountryNode(n.hdtRegions,r)},this),this._incidentsNode.hide()},_createCountryNode:function(t,n){var r=e.create("div","tt-country"),i=e.create("span");i.addClass(t.id),r.append(i),r.append(t.name),n.append(r)}});var o=10;return L.Util.extend(tomtom.languages.en_US,{JournalingPanel:{IncidentList:{headers:{delay:"Delay",length:"Length",reports:"Incidents"}},RegionList:{availableCountries:"TomTom {hdtraffic} is available in these countries:"},Summary:{footnote:"List of all reported incidents in this view",listAllReports:"List all incidents in this view",noReports:"Good news, there are no incidents in this view.",reports:"There is only one incident in this view;; {count} incidents in this view",serviceNotOffered:"Unfortunately, {hdtraffic} is not yet available in this area.",serviceUnavailable:"Sorry, traffic information is currently not available",totalLength:"Total length: ",updated:"Traffic updated 1 minute ago;; Traffic updated {time} minutes ago",waitingForUpdate:"Waiting for update"}},common:{TomTom:{HDTraffic:{registered:"HD Traffic &reg;",trademark:"HD Traffic &trade;"}},UILabels:{cancel:"Cancel",close:"Close",next:"Next",ok:"Ok",previous:"Previous",search:"Search",submit:"Submit"}}}),tomtom.controls.TrafficIncidentListControl}),tomtom.define("text!templates/controls/FindLocationControl.html",[],function(){return'<div class="tt-find-location-search">\r\n	<input type="text" />\r\n	<button>{findLocation}</button>\r\n</div>\r\n\r\n<div class="tt-find-location-results">\r\n	<div class="tt-find-location-match"></div>\r\n	<div class="tt-find-location-alt">\r\n		<span>{didYouMean}</span>\r\n		<ul>\r\n			\r\n		</ul>	\r\n	</div>\r\n</div>'}),tomtom.define("controls/FindLocationControl",["../dom/DomUtil","../services/GeocodingService","../Utils","../Marker","text!../templates/controls/FindLocationControl.html"],function(e,t,n,r,i){tomtom.controls.FindLocationControl=L.Class.extend({includes:L.Mixin.Events,initialize:function(t){var n=new tomtom.StringBundle("Controls");this._domNode=e.create(L.DomUtil.get(t.domNode)),this._domNode.addClass("tt-find-location-control"),this._domNode.html(L.Util.template(i,{findLocation:n.getString("button_find"),didYouMean:n.getString("did_you_mean")})),this._locationText=this._domNode.find(".tt-find-location-search input"),this._findButton=this._domNode.find(".tt-find-location-search button"),this._results=this._domNode.find(".tt-find-location-results"),this._locationText.on("keyup",this._locationKeyUp,this),this._findButton.on("click",this._geocode,this),this._map=t.map;if(this._map===null||this._map===undefined)throw"The map option of the FindLocationControl is required.";this._markers=(new L.LayerGroup).addTo(this._map)},clearMarkers:function(){this._markers.clearLayers()},_geocode:function(){var e=this._map.geocodingService;e.geocode(this._locationText.val(),L.Util.bind(function(e){var t=e.geoResponse,r=null;t&&(r=t.geoResult)&&(n.isArray(r)?(this._displayGeocode(r[0]),this._displayResults(r)):(this._displayGeocode(r),this._results.css("display","none")))},this))},_displayGeocode:function(e){this._map.setView([e.latitude,e.longitude],s),this.clearMarkers(),(new r([e.latitude,e.longitude])).addTo(this._markers)},_displayResults:function(t){t.forEach(function(t,n){if(n===0)this._domNode.find(".tt-find-location-match").html(t.formattedAddress);else{var r=e.create("li"),i=e.create("a");r.append(i),i.html(t.formattedAddress),i.attr("href","javascript:void(0);"),i.on("click",function(){this._displayGeocode(t)},this),this._domNode.find(".tt-find-location-alt ul").append(r)}},this),this._results.css("display","block")},_locationKeyUp:function(e){var t=e.keyCode?e.keyCode:e.which;t==13&&this._geocode()}});var s=12;return tomtom.controls.FindLocationControl}),tomtom.define("controls/RoutePlannerControl",["../Main","../dom/DomUtil","./RouteControl","./TabContainer","./FindLocationControl","./TrafficIncidentListControl"],function(e,t){return tomtom.controls.RoutePlannerControl=L.Class.extend({initialize:function(e){this._domNode=t.create(L.DomUtil.get(e.domNode)),this._map=e.map,this._routeNode=t.create("div"),this._findNode=t.create("div"),this._trafficNode=t.create("div");var n=new tomtom.StringBundle("General");this._tabControl=new tomtom.controls.TabContainer({domNode:this._domNode.get(0),tabs:[{title:n.getString("plan_a_route"),content:this._routeNode.get(0),tag:"route"},{title:n.getString("find_a_location"),content:this._findNode.get(0),tag:"location"},{title:n.getString("traffic"),content:this._trafficNode.get(0),tag:"traffic"}]}),this._routeControl=new tomtom.controls.RouteControl({domNode:this._routeNode.get(0),map:this._map}),this._findControl=new tomtom.controls.FindLocationControl({domNode:this._findNode.get(0),map:this._map}),this._trafficControl=new tomtom.controls.TrafficIncidentListControl({domNode:this._trafficNode.get(0),map:this._map}),L.DomEvent.on(window,"resize",this._tabControl.resize,this._tabControl)}}),tomtom.controls.RoutePlannerControl}),tomtom.require("controls/RouteControl"),tomtom.require("controls/ContextMenu"),tomtom.require("controls/TabContainer"),tomtom.require("controls/TrafficIncidentListControl"),tomtom.require("controls/FindLocationControl"),tomtom.require("controls/RoutePlannerControl");