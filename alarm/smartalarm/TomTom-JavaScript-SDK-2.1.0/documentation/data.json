{
    "project": {
        "name": "TomTom JavaScript SDK",
        "description": "The TomTom JavaScript SDK wrapper for the Map Toolkit API.",
        "version": "2.1.0",
        "url": "http://developer.tomtom.com/",
        "logo": "http://www.tomtom.com/global/images/tomtom-logo_tcm166-3340.png"
    },
    "files": {
        "src\\tomtom\\controls\\AutoComplete.js": {
            "name": "src\\tomtom\\controls\\AutoComplete.js",
            "modules": {},
            "classes": {
                "tomtom.controls.AutoComplete": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.controls": 1
            }
        },
        "src\\tomtom\\controls\\ContextMenu.js": {
            "name": "src\\tomtom\\controls\\ContextMenu.js",
            "modules": {},
            "classes": {
                "tomtom.controls.ContextMenu": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.controls": 1
            }
        },
        "src\\tomtom\\controls\\FindLocationControl.js": {
            "name": "src\\tomtom\\controls\\FindLocationControl.js",
            "modules": {},
            "classes": {
                "tomtom.controls.FindLocationControl": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.controls": 1
            }
        },
        "src\\tomtom\\controls\\Pan.js": {
            "name": "src\\tomtom\\controls\\Pan.js",
            "modules": {},
            "classes": {
                "L.Control.Pan": 1
            },
            "fors": {},
            "namespaces": {
                "L.Control": 1
            }
        },
        "src\\tomtom\\controls\\PanZoomBar.js": {
            "name": "src\\tomtom\\controls\\PanZoomBar.js",
            "modules": {},
            "classes": {
                "tomtom.controls.PanZoomBar": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.controls": 1
            }
        },
        "src\\tomtom\\controls\\RouteControl.js": {
            "name": "src\\tomtom\\controls\\RouteControl.js",
            "modules": {},
            "classes": {
                "tomtom.controls.RouteControl": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.controls": 1
            }
        },
        "src\\tomtom\\controls\\RoutePlannerControl.js": {
            "name": "src\\tomtom\\controls\\RoutePlannerControl.js",
            "modules": {},
            "classes": {
                "tomtom.controls.RoutePlannerControl": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.controls": 1
            }
        },
        "src\\tomtom\\controls\\TabContainer.js": {
            "name": "src\\tomtom\\controls\\TabContainer.js",
            "modules": {},
            "classes": {
                "tomtom.controls.TabContainer": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.controls": 1
            }
        },
        "src\\tomtom\\controls\\TrafficIncidentListControl.js": {
            "name": "src\\tomtom\\controls\\TrafficIncidentListControl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\tomtom\\controls\\ZoomSlider.js": {
            "name": "src\\tomtom\\controls\\ZoomSlider.js",
            "modules": {},
            "classes": {
                "L.Control.ZoomSlider": 1
            },
            "fors": {},
            "namespaces": {
                "L.Control": 1
            }
        },
        "src\\tomtom\\dom\\DomUtil.js": {
            "name": "src\\tomtom\\dom\\DomUtil.js",
            "modules": {},
            "classes": {
                "tomtom.dom.DomUtil": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.dom": 1
            }
        },
        "src\\tomtom\\dom\\DomUtilResult.js": {
            "name": "src\\tomtom\\dom\\DomUtilResult.js",
            "modules": {},
            "classes": {
                "tomtom.dom.DomUtilResult": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.dom": 1
            }
        },
        "src\\tomtom\\layers\\MapLayer.js": {
            "name": "src\\tomtom\\layers\\MapLayer.js",
            "modules": {},
            "classes": {
                "tomtom.layers.MapLayer": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.layers": 1
            }
        },
        "src\\tomtom\\layers\\TrafficIncidentLayer.js": {
            "name": "src\\tomtom\\layers\\TrafficIncidentLayer.js",
            "modules": {},
            "classes": {
                "tomtom.layers.TrafficIncidentLayer": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.layers": 1
            }
        },
        "src\\tomtom\\layers\\TrafficLayer.js": {
            "name": "src\\tomtom\\layers\\TrafficLayer.js",
            "modules": {},
            "classes": {
                "tomtom.layers.TrafficLayer": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.layers": 1
            }
        },
        "src\\tomtom\\layers\\WMSLayer.js": {
            "name": "src\\tomtom\\layers\\WMSLayer.js",
            "modules": {},
            "classes": {
                "tomtom.layers.WMSLayer": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.layers": 1
            }
        },
        "src\\tomtom\\services\\GeocodingService.js": {
            "name": "src\\tomtom\\services\\GeocodingService.js",
            "modules": {},
            "classes": {
                "tomtom.services.GeocodingService": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.services": 1
            }
        },
        "src\\tomtom\\services\\HDTRegionsService.js": {
            "name": "src\\tomtom\\services\\HDTRegionsService.js",
            "modules": {},
            "classes": {
                "tomtom.services.HDTRegionsService": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.services": 1
            }
        },
        "src\\tomtom\\services\\InitializeService.js": {
            "name": "src\\tomtom\\services\\InitializeService.js",
            "modules": {},
            "classes": {
                "tomtom.services.InitializeService": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.services": 1
            }
        },
        "src\\tomtom\\services\\LegacyGeocodingService.js": {
            "name": "src\\tomtom\\services\\LegacyGeocodingService.js",
            "modules": {},
            "classes": {
                "tomtom.services.LegacyGeocodingService": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.services": 1
            }
        },
        "src\\tomtom\\services\\NavKitRoutingService.js": {
            "name": "src\\tomtom\\services\\NavKitRoutingService.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "tomtom.services": 1
            }
        },
        "src\\tomtom\\services\\RoutingService.js": {
            "name": "src\\tomtom\\services\\RoutingService.js",
            "modules": {},
            "classes": {
                "tomtom.services.RoutingService": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.services": 1
            }
        },
        "src\\tomtom\\services\\TrafficService.js": {
            "name": "src\\tomtom\\services\\TrafficService.js",
            "modules": {},
            "classes": {
                "tomtom.services.TrafficService": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.services": 1
            }
        },
        "src\\tomtom\\services\\ViewportService.js": {
            "name": "src\\tomtom\\services\\ViewportService.js",
            "modules": {},
            "classes": {
                "tomtom.services.ViewportService": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom.services": 1
            }
        },
        "src\\tomtom\\AjaxUtil.js": {
            "name": "src\\tomtom\\AjaxUtil.js",
            "modules": {},
            "classes": {
                "tomtom.AjaxUtil": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom": 1
            }
        },
        "src\\tomtom\\Animation.js": {
            "name": "src\\tomtom\\Animation.js",
            "modules": {},
            "classes": {
                "tomtom.Animation": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom": 1
            }
        },
        "src\\tomtom\\CustomDivIcon.js": {
            "name": "src\\tomtom\\CustomDivIcon.js",
            "modules": {},
            "classes": {
                "tomtom.CustomDivIcon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tomtom\\CustomMarker.js": {
            "name": "src\\tomtom\\CustomMarker.js",
            "modules": {},
            "classes": {
                "tomtom.CustomMarker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tomtom\\Main.js": {
            "name": "src\\tomtom\\Main.js",
            "modules": {},
            "classes": {
                "tomtom.Main": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tomtom\\Map.js": {
            "name": "src\\tomtom\\Map.js",
            "modules": {},
            "classes": {
                "tomtom.Map": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom": 1
            }
        },
        "src\\tomtom\\Marker.js": {
            "name": "src\\tomtom\\Marker.js",
            "modules": {},
            "classes": {
                "tomtom.Marker": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom": 1
            }
        },
        "src\\tomtom\\MarkerManager.js": {
            "name": "src\\tomtom\\MarkerManager.js",
            "modules": {},
            "classes": {
                "tomtom.MarkerManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tomtom\\TrafficMarker.js": {
            "name": "src\\tomtom\\TrafficMarker.js",
            "modules": {},
            "classes": {
                "tomtom.TrafficMarker": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom": 1
            }
        },
        "src\\tomtom\\i18n.js": {
            "name": "src\\tomtom\\i18n.js",
            "modules": {},
            "classes": {
                "tomtom.LocaleManager": 1,
                "tomtom.StringBundle": 1
            },
            "fors": {},
            "namespaces": {
                "tomtom": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "tomtom.controls.AutoComplete": {
            "name": "tomtom.controls.AutoComplete",
            "shortname": "tomtom.controls.AutoComplete",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.controls",
            "file": "src\\tomtom\\controls\\AutoComplete.js",
            "line": 14,
            "description": "A simple auto complete control which can be wired into a text box.\nPlease note that this class is only included in the tomtom.controls.js file, it is not a part of the main tomtom.map.js.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "textBox",
                    "description": "The text box to add auto complete functionality to.",
                    "type": "DOM Node"
                },
                {
                    "name": "resultsCallback",
                    "description": "The callback to execute to retrieve the results.",
                    "type": "Function"
                },
                {
                    "name": "itemSelectedCallback",
                    "description": "The callback to execute when an item is selected.",
                    "type": "Function"
                }
            ]
        },
        "tomtom.controls.ContextMenu": {
            "name": "tomtom.controls.ContextMenu",
            "shortname": "tomtom.controls.ContextMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.controls",
            "file": "src\\tomtom\\controls\\ContextMenu.js",
            "line": 12,
            "description": "Creates a new ContextMenu which can be used to display a menu to the user when a marker or the map is right clicked.",
            "example": [
                "\n map.setContextMenu(new tomtom.controls.ContextMenu({\n   menuItems: [\n     { label: \"Test\", onClick: function() { alert(\"TEST!\"); } }\n   ]\n }));"
            ],
            "is_constructor": 1,
            "extends": "L.Control",
            "params": [
                {
                    "name": "options",
                    "description": "Options used to build the context menu.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "menuItems",
                            "description": "An array of the menu items to add.\n Each object should have a label and optionally an onClick callback.\n See the example below.",
                            "type": "Array"
                        }
                    ]
                }
            ]
        },
        "tomtom.controls.FindLocationControl": {
            "name": "tomtom.controls.FindLocationControl",
            "shortname": "tomtom.controls.FindLocationControl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.controls",
            "file": "src\\tomtom\\controls\\FindLocationControl.js",
            "line": 13,
            "description": "A control which can be used to search for locations throughout the world using TomTom's global geocoding technology.\nWhen the user executes a search, the map that was supplied to the constructor options will be updated to show the user's search result.\nIf more than one result is returned, the user will be given a choice as a list of locations.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Configuration options for the FindLocationControl.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "map",
                            "description": "The map that the find control should manage.",
                            "type": "L.Map"
                        },
                        {
                            "name": "domNode",
                            "description": "The DOM node that will",
                            "type": "String | DOM Node"
                        }
                    ]
                }
            ]
        },
        "L.Control.Pan": {
            "name": "L.Control.Pan",
            "shortname": "L.Control.Pan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "L.Control",
            "file": "src\\tomtom\\controls\\Pan.js",
            "line": 3,
            "description": "A control which allows the user to pan around the map by clicking buttons.\nSee <a href=\"https://github.com/kartena/Leaflet.Pancontrol\">https://github.com/kartena/Leaflet.Pancontrol</a> for more details.",
            "extends": "L.Control",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Configuration options for the pan control."
                }
            ]
        },
        "tomtom.controls.PanZoomBar": {
            "name": "tomtom.controls.PanZoomBar",
            "shortname": "tomtom.controls.PanZoomBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.controls",
            "file": "src\\tomtom\\controls\\PanZoomBar.js",
            "line": 9,
            "description": "A control that combines the Pan and ZoomSlider controls.\nThis control can easliy be added to a tomtom.Map by using the panZoomBar option.",
            "is_constructor": 1,
            "example": [
                "\n var map = new tomtom.Map({ domNode: \"map\", panZoomBar: true });"
            ]
        },
        "tomtom.controls.RouteControl": {
            "name": "tomtom.controls.RouteControl",
            "shortname": "tomtom.controls.RouteControl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.controls",
            "file": "src\\tomtom\\controls\\RouteControl.js",
            "line": 16,
            "description": "A control which can be used to allow a user to build and display a route on the map.\nThe control will allow the user to choose a start and end point and a departure time and then will display\nthe route on the map as well as all of the instructions.\n\nExample:\n\n    var routeControl = new tomtom.controls.RouteControl({ domNode: \"route\", map: map });\n\nPlease note that this control is not in the tomtom.map.js file.  To use it, the tomtom.controls.js file must be included.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Configuration options for the route control.",
                    "props": [
                        {
                            "name": "map",
                            "description": "The map that the route information will be displayed on.",
                            "type": "tomtom.Map"
                        },
                        {
                            "name": "domNode",
                            "description": "The DOM node which the route control will be displayed in.",
                            "type": "String | DOM Node"
                        }
                    ]
                }
            ]
        },
        "tomtom.controls.RoutePlannerControl": {
            "name": "tomtom.controls.RoutePlannerControl",
            "shortname": "tomtom.controls.RoutePlannerControl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.controls",
            "file": "src\\tomtom\\controls\\RoutePlannerControl.js",
            "line": 12,
            "description": "Creates a tab container with the RouteControl, FindLocationControl and TrafficIncidentListControl added.\nThis is a simple way to create a quick route planner application.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Configuration options for the route planner control.",
                    "props": [
                        {
                            "name": "map",
                            "description": "The map the route planner control will attach to.",
                            "type": "tomtom.Map"
                        },
                        {
                            "name": "domNode",
                            "description": "The DOM Node that the route planner control will be addded to.",
                            "type": "String | DOM Node"
                        }
                    ]
                }
            ]
        },
        "tomtom.controls.TabContainer": {
            "name": "tomtom.controls.TabContainer",
            "shortname": "tomtom.controls.TabContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.controls",
            "file": "src\\tomtom\\controls\\TabContainer.js",
            "line": 10,
            "description": "A simple tab container control.",
            "example": [
                "\n var tabContainer = new tomtom.controls.TabContainer({ domNode: \"tabs\" });\n tabContainer.addTab({ content: \"My custom tab\", title: \"My Tab\", tag: \"mytab\" });"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Configuration options for the tab control.",
                    "type": "Object"
                },
                {
                    "name": "domNode",
                    "description": "The DOM node which will contain the tab control.",
                    "type": "String | DOM Node"
                },
                {
                    "name": "tabs",
                    "description": "A list of tab options (see {{#crossLink \"TabContainer/addTab:method\"}}addTab{{/crossLink}}).",
                    "type": "Array"
                }
            ]
        },
        "L.Control.ZoomSlider": {
            "name": "L.Control.ZoomSlider",
            "shortname": "L.Control.ZoomSlider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "L.Control",
            "file": "src\\tomtom\\controls\\ZoomSlider.js",
            "line": 3,
            "description": "A control which adds a zoom slider to the map.\nSee <a href=\"https://github.com/kartena/Leaflet.zoomslider\">https://github.com/kartena/Leaflet.zoomslider</a>",
            "is_constructor": 1,
            "extends": "L.Control"
        },
        "tomtom.dom.DomUtil": {
            "name": "tomtom.dom.DomUtil",
            "shortname": "tomtom.dom.DomUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.dom",
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 10,
            "description": "A utility class that makes searching and manipulating the DOM very easy.  This class is very similar to jQuery and in fact it uses the same selector engine (Sizzle) that jQuery uses.",
            "extends": "L.DomUtil",
            "is_constructor": 1
        },
        "tomtom.dom.DomUtilResult": {
            "name": "tomtom.dom.DomUtilResult",
            "shortname": "tomtom.dom.DomUtilResult",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.dom",
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 9,
            "description": "Wraps a series of DOM Nodes and provides extra functionality.\nThis class should not be instantiated directly, instead use the methods of the {{#crossLink \"tomtom.dom.DomUtil\"}}DomUtil{{/crossLink}} class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elements",
                    "description": "The elements to wrap.",
                    "type": "Array"
                },
                {
                    "name": "dutil",
                    "description": "The DomUtil object to use to interface with Dojo / jQuery.",
                    "type": "tomtom.dom.DomUtil"
                }
            ]
        },
        "tomtom.layers.MapLayer": {
            "name": "tomtom.layers.MapLayer",
            "shortname": "tomtom.layers.MapLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.layers",
            "file": "src\\tomtom\\layers\\MapLayer.js",
            "line": 10,
            "description": "The TomTom Basic map layer.  This layer displays the TomTom Map using the Map Toolkit's Raster Tile API.",
            "is_constructor": 1,
            "extends": "L.TileLayer",
            "params": [
                {
                    "name": "options",
                    "description": "Configuration options for the layer.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "apiKey",
                            "description": "The Map Toolkit API that should be used with the Raster Tile API.  This will override the tomtom.apiKey property.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "minZoom",
                            "description": "Minimum zoom number.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "maxZoom",
                            "description": "Maximum zoom number.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "18"
                        },
                        {
                            "name": "tileSize",
                            "description": "Tile size (width and height in pixels, assuming tiles are square).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "256"
                        },
                        {
                            "name": "subdomains",
                            "description": "Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'abc'"
                        },
                        {
                            "name": "errorTileUrl",
                            "description": "URL to the tile image to show in place of the tile that failed to load.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "attribution",
                            "description": "e.g. \"© CloudMade\" — the string used by the attribution control, describes the layer data.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "tms",
                            "description": "If true, inverses Y axis numbering for tiles (turn this on for TMS services).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "continuousWorld",
                            "description": "If set to true, the tile coordinates won't be wrapped by world width (-180 to 180 longitude) or clamped to lie within world height (-90 to 90). Use this if you use Leaflet for maps that don't reflect the real world (e.g. game, indoor or photo maps).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "noWrap",
                            "description": "If set to true, the tiles just won't load outside the world width (-180 to 180 longitude) instead of repeating.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "zoomOffset",
                            "description": "The zoom number used in tile URLs will be offset with this value.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "zoomReverse",
                            "description": "If set to true, the zoom number used in tile URLs will be reversed (maxZoom - zoom instead of zoom)",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "opacity",
                            "description": "The opacity of the tile layer.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "zIndex",
                            "description": "The explicit zIndex of the tile layer. Not set by default.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "unloadInvisibleTiles",
                            "description": "If true, all the tiles that are not visible after panning are removed (for better performance). true by default on mobile WebKit, otherwise false.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "depends"
                        },
                        {
                            "name": "updateWhenIdle",
                            "description": "If false, new tiles are loaded during panning, otherwise only after it (for better performance). true by default on mobile WebKit, otherwise false.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "depends"
                        },
                        {
                            "name": "detectRetina",
                            "description": "If true and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "reuseTiles",
                            "description": "If true, all the tiles that are not visible after panning are placed in a reuse queue from which they will be fetched when new tiles become visible (as opposed to dynamically creating new ones). This will in theory keep memory usage low and eliminate the need for reserving new memory whenever a new tile is needed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "tomtom.layers.TrafficIncidentLayer": {
            "name": "tomtom.layers.TrafficIncidentLayer",
            "shortname": "tomtom.layers.TrafficIncidentLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.layers",
            "file": "src\\tomtom\\layers\\TrafficIncidentLayer.js",
            "line": 29,
            "description": "Displays traffic incident icons as a layer above the base map.\nIt is recommended that this class is not used directly but rather the {{#crossLink \"tomtom.Map\"}}Map{{/crossLink}}'s displayTraffic\noption is used like this:\n\n var map = new tomtom.Map({\n   domNode: \"map\",\n   displayTraffic: true\n });",
            "is_constructor": 1,
            "extends": "L.LayerGroup",
            "params": [
                {
                    "name": "apiKey",
                    "description": "The API key used to access the Map Toolkit API.",
                    "type": "String"
                },
                {
                    "name": "trafficModel",
                    "description": "The starting traffic model used to access the traffic service.",
                    "type": "String"
                }
            ]
        },
        "tomtom.layers.TrafficLayer": {
            "name": "tomtom.layers.TrafficLayer",
            "shortname": "tomtom.layers.TrafficLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.layers",
            "file": "src\\tomtom\\layers\\TrafficLayer.js",
            "line": 10,
            "description": "Displays traffic flow information on top of the TomTom base map.\nIt is recommended that this class is not used directly but rather the {{#crossLink \"tomtom.Map\"}}Map{{/crossLink}}'s displayTraffic\noption is used like this:\n\n var map = new tomtom.Map({\n   domNode: \"map\",\n   displayTraffic: true\n });",
            "is_constructor": 1,
            "extends": "L.TileLayer",
            "params": [
                {
                    "name": "apiKey",
                    "description": "The API key used to access the Map Toolkit API.",
                    "type": "String"
                },
                {
                    "name": "trafficModel",
                    "description": "The starting traffic model used to access the traffic service.",
                    "type": "String"
                }
            ]
        },
        "tomtom.layers.WMSLayer": {
            "name": "tomtom.layers.WMSLayer",
            "shortname": "tomtom.layers.WMSLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.layers",
            "file": "src\\tomtom\\layers\\WMSLayer.js",
            "line": 10,
            "description": "An extension of the L.TileLayer.WMS which adds support for custom srs parameter.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The URL to the WMS layer.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "WMS Layer options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "layers=''",
                            "description": "Comma-separated list of WMS layers to show.",
                            "type": "String"
                        },
                        {
                            "name": "styles",
                            "description": "Comma-separated list of WMS styles.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "format",
                            "description": "WMS image format (use 'image/png' for layers with transparency).",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'image/jpeg'"
                        },
                        {
                            "name": "transparent",
                            "description": "If true, the WMS service will return images with transparency.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "version",
                            "description": "Version of the WMS service to use.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'1.1.1'"
                        }
                    ]
                }
            ]
        },
        "tomtom.services.GeocodingService": {
            "name": "tomtom.services.GeocodingService",
            "shortname": "tomtom.services.GeocodingService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.services",
            "file": "src\\tomtom\\services\\GeocodingService.js",
            "line": 11,
            "description": "A service which provides geocoding functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "apiKey",
                    "description": "The API key used to access the Map Toolkit API.",
                    "type": "String"
                }
            ]
        },
        "tomtom.services.HDTRegionsService": {
            "name": "tomtom.services.HDTRegionsService",
            "shortname": "tomtom.services.HDTRegionsService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.services",
            "file": "src\\tomtom\\services\\HDTRegionsService.js",
            "line": 10,
            "description": "A service which gets information about overall traffic conditions in the world.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "apiKey",
                    "description": "The API key used to access the Map Toolkit API.",
                    "type": "String"
                }
            ]
        },
        "tomtom.services.InitializeService": {
            "name": "tomtom.services.InitializeService",
            "shortname": "tomtom.services.InitializeService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.services",
            "file": "src\\tomtom\\services\\InitializeService.js",
            "line": 10,
            "description": "A service which gets copyright information about the map toolkit..",
            "is_constructor": 1,
            "params": [
                {
                    "name": "apiKey",
                    "description": "The API key used to access the Map Toolkit API.",
                    "type": "String"
                }
            ]
        },
        "tomtom.services.LegacyGeocodingService": {
            "name": "tomtom.services.LegacyGeocodingService",
            "shortname": "tomtom.services.LegacyGeocodingService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.services",
            "file": "src\\tomtom\\services\\LegacyGeocodingService.js",
            "line": 11,
            "description": "A service which provides geocoding functionality.\nThis service is the legacy version of the TomTom Geocoder.  It is intended to be used in situations where the\nnew geocoder is not compatible.",
            "is_constructor": 1,
            "deprecated": true,
            "deprecationMessage": "This service will be removed in a future version.",
            "params": [
                {
                    "name": "apiKey",
                    "description": "The API key used to access the Map Toolkit API.",
                    "type": "String"
                }
            ]
        },
        "tomtom.services.RoutingService": {
            "name": "tomtom.services.RoutingService",
            "shortname": "tomtom.services.RoutingService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.services",
            "file": "src\\tomtom\\services\\RoutingService.js",
            "line": 12,
            "description": "A service which provides routing functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "apiKey",
                    "description": "The API key used to access the Map Toolkit API.",
                    "type": "String"
                }
            ]
        },
        "tomtom.services.TrafficService": {
            "name": "tomtom.services.TrafficService",
            "shortname": "tomtom.services.TrafficService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.services",
            "file": "src\\tomtom\\services\\TrafficService.js",
            "line": 12,
            "description": "A service which provides traffic information via the Map Toolkit API.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "apiKey",
                    "description": "The API key used to access the Map Toolkit API.",
                    "type": "String"
                }
            ]
        },
        "tomtom.services.ViewportService": {
            "name": "tomtom.services.ViewportService",
            "shortname": "tomtom.services.ViewportService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom.services",
            "file": "src\\tomtom\\services\\ViewportService.js",
            "line": 9,
            "description": "A service which gets information about the current viewport.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "apiKey",
                    "description": "The API key used to access the Map Toolkit API.",
                    "type": "String"
                }
            ]
        },
        "tomtom.AjaxUtil": {
            "name": "tomtom.AjaxUtil",
            "shortname": "tomtom.AjaxUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\AjaxUtil.js",
            "line": 2,
            "description": "A simple class to execute requests using XHR to retrieve JSON or JSONP.",
            "static": 1
        },
        "tomtom.Animation": {
            "name": "tomtom.Animation",
            "shortname": "tomtom.Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\Animation.js",
            "line": 11,
            "description": "Creates an animation object which can be used to play animations for DOM Nodes.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element the animation should be performed on.",
                    "type": "String | DOM Node"
                },
                {
                    "name": "effect",
                    "description": "The effect used to play the animation.  Should be one of \"bounce\", \"dropIn\", \"fadeIn\", \"fadeOut\".",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Additional options for the animation.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "duration",
                            "description": "The duration the animation should be played for.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "500"
                        },
                        {
                            "name": "delay",
                            "description": "The time to wait before starting the animation.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "callback",
                            "description": "The callback to be executed when the animation has completed.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n new tomtom.Animation(document.getElementById(\"test\"), \"fadeIn\").play();"
            ]
        },
        "tomtom.CustomDivIcon": {
            "name": "tomtom.CustomDivIcon",
            "shortname": "CustomDivIcon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\CustomDivIcon.js",
            "line": 3,
            "description": "A custom icon implmentation used by tomtom.CustomMarker.",
            "extends": "L.DivIcon"
        },
        "tomtom.CustomMarker": {
            "name": "tomtom.CustomMarker",
            "shortname": "CustomMarker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\CustomMarker.js",
            "line": 12,
            "description": "An extension of the Marker class which allows the use of custom icons and therefore allows CSS customization.\nThis class can be extended to build custom markers that need to be customized via CSS.\nFor instance, the {{#crossLink \"tomtom.TrafficMarker\"}}TrafficMarker{{/crossLink}} class uses this as a base.",
            "is_constructor": 1,
            "extends": "tomtom.Marker",
            "params": [
                {
                    "name": "The",
                    "description": "lat / lng the marker should be added at.  Can either pass an array, [lat, lng] or a L.LatLng object.",
                    "type": "L.LatLng"
                },
                {
                    "name": "className",
                    "description": "The css class that will be added to the marker element.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options to pass to the tomtom.Marker constructor (markerOptions parameter).  Also, an html property can be specified as an option\n to set the initial HTML of the marker div.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "tomtom.Main": {
            "name": "tomtom.Main",
            "shortname": "Main",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\Main.js",
            "line": 1,
            "description": "The Main module for the TomTom JavaScript SDK.\nContains static methods and properties.",
            "author": "Kyle Pinette",
            "static": 1
        },
        "tomtom.Map": {
            "name": "tomtom.Map",
            "shortname": "tomtom.Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\Map.js",
            "line": 29,
            "description": "Creates a new instance of a TomTom Map.  The map can be embedded multiple times on the same page.\nTo create a map, supply an API key and a domNode for the map to append its markup to.  See the options parameter for all\navailable options.\n\nFor documentation about the base Leaflet Map and other objects, see <a href=\"http://leafletjs.com/reference.html\">http://leafletjs.com/reference.html</a>.",
            "example": [
                "\n // a basic map\n var map = new tomtom.Map({\n   apiKey: \"123456\",\n   domNode: \"map\"\n\t});"
            ],
            "is_constructor": 1,
            "extends": "L.Map",
            "params": [
                {
                    "name": "options",
                    "description": "Options to supply to the map.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "domNode",
                            "description": "The id of the DOM node, or the DOM node itself to use as the map container.",
                            "type": "String|DOM Node"
                        },
                        {
                            "name": "apiKey",
                            "description": "The API Key issued from <a href=\"http://developer.tomtom.com\">http://developer.tomtom.com</a>.  This is optional if\n tomtom.apiKey has been set already.",
                            "type": "String"
                        },
                        {
                            "name": "cookie",
                            "description": "pass true or false to enable or disable the use of a cookie to keep the map\n state across page views.\n Supply an object to customize cookie options.",
                            "type": "Object|boolean",
                            "optional": true,
                            "props": [
                                {
                                    "name": "name",
                                    "description": "The name of the cookie to be written.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "expirationDays",
                                    "description": "The number of days before the cookie will expire.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "center",
                            "description": "point where the map will be centered upon startup.  Please note that this option is\n overridden if the cookie option is enabled.",
                            "type": "Array|L.LatLng",
                            "optional": true
                        },
                        {
                            "name": "zoom",
                            "description": "The zoom level the map will go to at startup.  The default is to zoom out to the lowest zoom level available.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "layers",
                            "description": "The layers to be added to the map at startup.  Any Leaflet layer / TomTom layer can be used.\n By default, the tomtom.layers.MapLayer is added as the base layer.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "overviewMap",
                            "description": "If any non-false value is passed as this option, an overview map will be displayed.  If an Object is passed,\n the object will be passed as options to the overviewMap's constructor constructor. See <a href=\"https://github.com/Norkart/Leaflet-MiniMap\">https://github.com/Norkart/Leaflet-MiniMap</a> for available options.",
                            "type": "Object|boolean",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "Determines whether or not to add the L.Control.Scale control to the map.  This control\n displays basic scale information on the map.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "zoomControl",
                            "description": "If any non-false value is passed as this option, a leaflet zoom control is added.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "panZoomBar",
                            "description": "If any non-false value is passed, the tomtom PanZoomBar control is added.\n If an Object is passed, the object will be passed to the {{#crossLink \"tomtom.controls.PanZoomBar\"}}tomtom.controls.PanZoomBar{{/crossLink}} control's constructor.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "displayTraffic",
                            "description": "Determines whether or not traffic incidents and flow information is included on the map.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "baseLayerOptions",
                            "description": "Options that will be passed to the base map layer.  Note that if options.layers is supplied, this option is not used.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "tomtom.Marker": {
            "name": "tomtom.Marker",
            "shortname": "tomtom.Marker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\Marker.js",
            "line": 10,
            "description": "A class which can be used to add an image based marker to the map.\nMarkers are used to highlight points on the map.  The marker image can be customized by specifying the iconOptions parameter.\nAlso, a default marker can be set by setting tomtom.Marker.DEFAULT\\_MARKER\\_OPTIONS.",
            "is_constructor": 1,
            "extends": "L.Marker",
            "params": [
                {
                    "name": "latlng",
                    "description": "The lat / lng the marker should be added at.  Can either pass an array, [lat, lng] or a L.LatLng object.",
                    "type": "Array | L.LatLng"
                },
                {
                    "name": "iconOptions",
                    "description": "The options used to build the marker's image.  If this is not specified,\n tomtom.Marker.DEFAULT\\_MARKER\\_OPTIONS will be used.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "iconUrl",
                            "description": "The URL to the icon image (absolute or relative to your script path).",
                            "type": "String"
                        },
                        {
                            "name": "iconRetinaUrl",
                            "description": "The URL to a retina sized version of the icon image (absolute or relative to your script path). Used for Retina screen devices.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "iconSize",
                            "description": "Size of the icon image in pixels.",
                            "type": "L.Point",
                            "optional": true
                        },
                        {
                            "name": "iconAnchor",
                            "description": "The coordinates of the \"tip\" of the icon (relative to its top left corner). The icon will be aligned so that this point is at the marker's geographical location. Centered by default if size is specified, also can be set in CSS with negative margins.",
                            "type": "L.Point",
                            "optional": true
                        },
                        {
                            "name": "shadowUrl",
                            "description": "The URL to the icon shadow image. If not specified, no shadow image will be created.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "shadowRetinaUrl",
                            "description": "The URL to the retina sized version of the icon shadow image. If not specified, no shadow image will be created. Used for Retina screen devices.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "shadowSize",
                            "description": "Size of the shadow image in pixels.",
                            "type": "L.Point",
                            "optional": true
                        },
                        {
                            "name": "shadowAnchor",
                            "description": "The coordinates of the \"tip\" of the shadow (relative to its top left corner) (the same as iconAnchor if not specified).",
                            "type": "L.Point",
                            "optional": true
                        },
                        {
                            "name": "popupAnchor",
                            "description": "The coordinates of the point from which popups will \"open\", relative to the icon anchor.",
                            "type": "L.Point",
                            "optional": true
                        },
                        {
                            "name": "className",
                            "description": "Custom class name to assign to both icon and shadow images. Empty by default.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "markerOptions",
                    "description": "Additional options to customize the marker.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "icon",
                            "description": "Icon class to use for rendering the marker. See Icon documentation for details on how to customize the marker icon. Set to new L.Icon.Default() by default.",
                            "type": "L.Icon",
                            "optional": true
                        },
                        {
                            "name": "clickable",
                            "description": "If false, the marker will not emit mouse events and will act as a part of the underlying map.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "draggable",
                            "description": "Whether the marker is draggable with mouse/touch or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "title",
                            "description": "Text for the browser tooltip that appear on marker hover (no tooltip by default).",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "zIndexOffset",
                            "description": "By default, marker images zIndex is set automatically based on its latitude. You this option if you want to put the marker on top of all others (or below), specifying a high value like 1000 (or high negative value, respectively).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "opacity",
                            "description": "The opacity of the marker.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "riseOnHover",
                            "description": "If true, the marker will get on top of others when you hover the mouse over it.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "riseOffset",
                            "description": "The z-index offset used for the riseOnHover feature.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "250"
                        }
                    ]
                }
            ],
            "example": [
                "\n map.addLayer(new tomtom.Marker([-71.53686, 43.20846]));"
            ]
        },
        "tomtom.MarkerManager": {
            "name": "tomtom.MarkerManager",
            "shortname": "MarkerManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\MarkerManager.js",
            "line": 11,
            "description": "Handles the management of multiple markers.\nThis class should be used when more than a handful of related markers are being displayed on the map.\nThe marker manager is especially handy when dealing with updating markers periodically as IDs can be assigned to a marker.\nMarkers can then be retrieved by their ID so as to update their location without having to redraw all of the markers.\n\nFor example:\n\n // create the marker manager\n var mm = new tomtom.MarkerManager({ map: map });\n\n // add a marker\n mm.addMarker(new tomtom.Marker([43.20846, -71.53686]), \"marker_123\");\n mm.update();\n\n // retrieve the marker by its id\n var marker = mm.getMarkerById(\"marker_123\");\n\n // update the marker's location\n marker.setLatLng([34.05224, -118.24334]);\n\nIn order for the changes applied to the marker manager, such as adding or removing markers, the update method must be called.\nThis allows for processing of many markers all at once, and then the markers being updated in the DOM once processing is completed.\n\nAlso, the MarkerManager makes it extremely easy to cluster markers depending on zoom level. See the clustering option below.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options which can be used to customize the behavior of the MarkerManager.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "map",
                            "description": "The map which the marker manager should update.",
                            "type": "L.Map"
                        },
                        {
                            "name": "animation",
                            "description": "An object used to customize the animation of any markers displayed by the marker manager.\n To disable animations, specify false for this property.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "effect",
                                    "description": "The effect used to animate the markers. Can be either \"fade\" or \"bounce\".",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"fade\""
                                },
                                {
                                    "name": "duration",
                                    "description": "The duration (ms) of the animations.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "250"
                                },
                                {
                                    "name": "delay",
                                    "description": "The delay between each marker's animation.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                }
                            ]
                        },
                        {
                            "name": "clustering",
                            "description": "Options for clustering of markers.  To disable clustering, specify false for this property.\n Please note that depending on the volume of markers, customizing clustering parameters can cause performance issues.  It is recommended\n that if clustering is used, the default clustering options be left.  Also, if more than 500 markers are being displayed, it is recommended\n that clustering happen at the server side rather than the client side.  Client browsers (especially Internet Explorer) begin to slow down\n when many markers are being processed.  See https://github.com/Leaflet/Leaflet.markercluster for all of the options which are available.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "tomtom.TrafficMarker": {
            "name": "tomtom.TrafficMarker",
            "shortname": "tomtom.TrafficMarker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\TrafficMarker.js",
            "line": 7,
            "description": "A marker which is used to mark traffic incidents and clusters of traffic incidents.",
            "is_constructor": 1,
            "extends": "tomtom.CustomMarker",
            "params": [
                {
                    "name": "latlng",
                    "description": "The lat / lng the marker should be added at.  Can either pass an array, [lat, lng] or a L.LatLng object.",
                    "type": "L.LatLng"
                },
                {
                    "name": "incident",
                    "description": "The incident information returned from the traffic service.",
                    "type": "Object"
                }
            ]
        },
        "tomtom.LocaleManager": {
            "name": "tomtom.LocaleManager",
            "shortname": "tomtom.LocaleManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\i18n.js",
            "line": 232,
            "description": "Manages locale information for all controls within the SDK.",
            "static": 1
        },
        "tomtom.StringBundle": {
            "name": "tomtom.StringBundle",
            "shortname": "tomtom.StringBundle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tomtom",
            "file": "src\\tomtom\\i18n.js",
            "line": 388,
            "description": "Creates a new StringBundle instance.\nSee the tomtom.i18n.js file for all available keys / values.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "branchKey",
                    "description": "The branch we want use as the default for\n     this StringBundle",
                    "type": "String"
                },
                {
                    "name": "rootBundle",
                    "description": "The StringBundle to be used as the\n     root object to obtain strings",
                    "type": "StringBundle",
                    "optional": true,
                    "optdefault": "StringBundle"
                }
            ],
            "example": [
                "\n var stringBundle = new tomtom.StringBundle(\"General\");\n alert(stringBundle.getString(\"traffic\"));"
            ]
        }
    },
    "classitems": [
        {
            "file": "src\\tomtom\\controls\\AutoComplete.js",
            "line": 59,
            "description": "Releases any resources that the control is holding onto.",
            "itemtype": "method",
            "name": "destroy",
            "class": "tomtom.controls.AutoComplete",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\AutoComplete.js",
            "line": 73,
            "description": "Clears the auto complete list.",
            "itemtype": "method",
            "name": "clear",
            "class": "tomtom.controls.AutoComplete",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\AutoComplete.js",
            "line": 83,
            "description": "Processes the results and loads them into the auto complete list.",
            "itemtype": "method",
            "name": "processResults",
            "params": [
                {
                    "name": "results",
                    "description": "The items to load into the auto complete list.",
                    "type": "Array"
                }
            ],
            "class": "tomtom.controls.AutoComplete",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\AutoComplete.js",
            "line": 130,
            "description": "Show's the auto complete list.",
            "itemtype": "method",
            "name": "show",
            "class": "tomtom.controls.AutoComplete",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\AutoComplete.js",
            "line": 138,
            "description": "Hides the auto complete list.",
            "itemtype": "method",
            "name": "hide",
            "class": "tomtom.controls.AutoComplete",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\AutoComplete.js",
            "line": 146,
            "description": "Stops the auto complete list from triggering a result query.",
            "itemtype": "method",
            "name": "cancel",
            "class": "tomtom.controls.AutoComplete",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\ContextMenu.js",
            "line": 49,
            "description": "Create a separate instance of the document click function.\nLeaflet's L.Util.stamp isn't very bright when creating unique identifiers for event handlers.",
            "class": "tomtom.controls.ContextMenu",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\ContextMenu.js",
            "line": 67,
            "description": "Adds a new menu item to the context menu.",
            "itemtype": "method",
            "name": "addMenuItem",
            "params": [
                {
                    "name": "menuItem",
                    "description": "The menu item to add to the context menu.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "label",
                            "description": "The label to be displayed to the user in the context menu.",
                            "type": "String"
                        },
                        {
                            "name": "onClick",
                            "description": "A callback to execute when the menu item is clicked.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "tomtom.controls.ContextMenu",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\ContextMenu.js",
            "line": 131,
            "description": "An event which is triggered when a menu item is clicked.",
            "itemtype": "event",
            "name": "menuitemclick",
            "params": [
                {
                    "name": "eventArgs",
                    "description": "Arguments passed to the event that carry information about the event.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "menuItem",
                            "description": "The menu item which was clicked.",
                            "type": "Object"
                        },
                        {
                            "name": "contextMenu",
                            "description": "The context menu that triggered the event.",
                            "type": "tomtom.ContextMenu"
                        },
                        {
                            "name": "x",
                            "description": "The x coordinate of the current map relative position that the menu is being displayed at.",
                            "type": "Number"
                        },
                        {
                            "name": "y",
                            "description": "The y coordinate of the current map relative position that the menu is being displayed at.",
                            "type": "Number"
                        },
                        {
                            "name": "targetElement",
                            "description": "The element for which the menu is being displayed.",
                            "type": "DOM Node"
                        },
                        {
                            "name": "targetObject",
                            "description": "An object associated with the DOM Node for which the menu is being displayed.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "tomtom.controls.ContextMenu",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\ContextMenu.js",
            "line": 146,
            "description": "Adds the context menu for the specified target element.\nA context menu can handle multiple targets.",
            "itemtype": "method",
            "name": "addTarget",
            "params": [
                {
                    "name": "targetElement",
                    "description": "The element to attach the context menu to.",
                    "type": "DOM Node"
                },
                {
                    "name": "targetObject",
                    "description": "A data object to associate with the target element.\n This object will be passed in the menu item click events.",
                    "type": "Object"
                }
            ],
            "class": "tomtom.controls.ContextMenu",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\ContextMenu.js",
            "line": 171,
            "description": "Stops the context menu from displaying for the specified target.",
            "itemtype": "method",
            "name": "removeTarget",
            "params": [
                {
                    "name": "targetElement",
                    "description": "",
                    "type": "DOM Node"
                }
            ],
            "class": "tomtom.controls.ContextMenu",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\ContextMenu.js",
            "line": 206,
            "description": "Attaches custom data to the context menu.",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "data",
                    "description": "The data to attach to the context menu.",
                    "type": "Object"
                }
            ],
            "class": "tomtom.controls.ContextMenu",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\ContextMenu.js",
            "line": 215,
            "description": "Gets the data attached to this context menu.",
            "itemtype": "method",
            "name": "getData",
            "return": {
                "description": "Object"
            },
            "class": "tomtom.controls.ContextMenu",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\ContextMenu.js",
            "line": 240,
            "description": "Destroys the context menu and all associated resources.",
            "itemtype": "method",
            "name": "onRemove",
            "class": "tomtom.controls.ContextMenu",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\ContextMenu.js",
            "line": 270,
            "description": "Hides the context menu.",
            "itemtype": "method",
            "name": "hide",
            "class": "tomtom.controls.ContextMenu",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\RouteControl.js",
            "line": 162,
            "description": "Releases any resources the control is holding onto.",
            "itemtype": "method",
            "name": "destroy",
            "class": "tomtom.controls.RouteControl",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\TabContainer.js",
            "line": 47,
            "description": "Adds a tab based on the options supplied.",
            "example": [
                "\n tabContainer.addTab({ content: \"My tab content\", title: \"My Tab\", tag: \"mytab\" });"
            ],
            "itemtype": "method",
            "name": "addTab",
            "params": [
                {
                    "name": "options",
                    "description": "Options used to configure the tab being added.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "content",
                            "description": "The content that will be appended to the body of the tab.",
                            "type": "String | DOM Node"
                        },
                        {
                            "name": "title",
                            "description": "The title that will be displayed in the tab container's tab bar.",
                            "type": "String | DOM Node"
                        }
                    ]
                },
                {
                    "name": "tag",
                    "description": "A unique identifier for the tab.",
                    "type": "String"
                }
            ],
            "class": "tomtom.controls.TabContainer",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\TabContainer.js",
            "line": 79,
            "description": "Updates the tab that has the specified tag.",
            "itemtype": "method",
            "name": "updateTab",
            "params": [
                {
                    "name": "tag",
                    "description": "The tag of the tab to update.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options of the tab to change. See {{#crossLink \"TabContainer/addTab:method\"}}addTab{{/crossLink}}.",
                    "type": "Object"
                }
            ],
            "class": "tomtom.controls.TabContainer",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\TabContainer.js",
            "line": 99,
            "description": "Resizes the tab container based on the height of its container.",
            "itemtype": "method",
            "name": "resize",
            "class": "tomtom.controls.TabContainer",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\TabContainer.js",
            "line": 111,
            "description": "Sets the selected tab.",
            "itemtype": "method",
            "name": "setSelectedTab",
            "params": [
                {
                    "name": "tag",
                    "description": "The tag of the tab to select.",
                    "type": "String"
                }
            ],
            "class": "tomtom.controls.TabContainer",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\TrafficIncidentListControl.js",
            "line": 14,
            "description": "A control which will display traffic incidents that are visible in the current window of the map.\nNote that if Live Traffic is not enabled on the map, this control will not function properly.",
            "example": [
                "\n var map = new tomtom.Map({ domNode: \"map\", displayTraffic: true });\n var trafficControl = new tomtom.controls.TrafficIncidentListControl({ domNode: \"traffic\", map: map });"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "Configuration options for the traffic control.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "map",
                            "description": "The map for which the traffic incident list will be displayed.",
                            "type": "tomtom.Map"
                        },
                        {
                            "name": "domNode",
                            "description": "The DOM node that the traffic control will be added to.",
                            "type": "String | DOM Node"
                        }
                    ]
                }
            ],
            "class": "L.Control.ZoomSlider",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\controls\\TrafficIncidentListControl.js",
            "line": 108,
            "description": "Destroys the traffic control and all its associated resources.",
            "itemtype": "method",
            "name": "destroy",
            "class": "L.Control.ZoomSlider",
            "namespace": "tomtom.controls"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 1,
            "description": "Base class for the framework specific DomUtil.",
            "class": "tomtom.dom.DomUtil",
            "namespace": "L.Control"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 20,
            "description": "Queries the DOM for the specified elements.",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "query",
                    "description": "The selector to be used to query elements.",
                    "type": "String"
                },
                {
                    "name": "baseElement",
                    "description": "The element whose children should be queried.",
                    "type": "DOM Node",
                    "optional": true
                }
            ],
            "return": {
                "description": "The queried elements.",
                "type": "Result"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 41,
            "description": "Gets or sets a css property on an element.",
            "itemtype": "method",
            "name": "css",
            "params": [
                {
                    "name": "element",
                    "description": "The element to get / set css properties on.",
                    "type": "DOM Node"
                },
                {
                    "name": "property",
                    "description": "The name of the css property to set.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the css property.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "If getting a css property (no value specified) the value will be returned.\n Otherwise, a DomUtilResult containing the specified element will be returned.",
                "type": "String|result"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 64,
            "description": "Gets the offset information for the specified element.",
            "itemtype": "method",
            "name": "offset",
            "params": [
                {
                    "name": "element",
                    "description": "The element to retrieve offset information for.",
                    "type": "DOM Node"
                }
            ],
            "return": {
                "description": "An object which contains top and left properties.",
                "type": "Object"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 85,
            "description": "Clears the contents of the specified element.",
            "itemtype": "method",
            "name": "empty",
            "params": [
                {
                    "name": "element",
                    "description": "The element to empty.",
                    "type": "DOM Node"
                }
            ],
            "return": {
                "description": "A DomUtilResult containing the element.",
                "type": "Result"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 100,
            "description": "Gets or sets the content of the specified element.",
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "element",
                    "description": "The element whose content should be set.",
                    "type": "DOM Node"
                },
                {
                    "name": "html",
                    "description": "The content to set.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "If html is set, a DomUtilResult containing the element will be returned, otherwise the HTML content\n will be returned.",
                "type": "String|result"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 126,
            "description": "Appends a DOM Node or HTML content to the specified element.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "element",
                    "description": "The element to append to.",
                    "type": "DOM Node"
                },
                {
                    "name": "html",
                    "description": "The content to append.",
                    "type": "String|DOM Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Result"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 148,
            "description": "Gets or sets an attribute of the specified element.",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "element",
                    "description": "The element to get or set an attribute for.",
                    "type": "DOM Node"
                },
                {
                    "name": "name",
                    "description": "The name of the attribute to get or set.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the attribute to set.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String|result"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 170,
            "description": "Removes the attribute from the specified element.",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "element",
                    "description": "The element to remove the attribute from.",
                    "type": "DOM Node"
                },
                {
                    "name": "name",
                    "description": "The name of the attribute to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Result"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 187,
            "description": "Gets or sets associated data for the specified element.",
            "itemtype": "method",
            "name": "data",
            "params": [
                {
                    "name": "element",
                    "description": "The element to get or set associated data on.",
                    "type": "DOM Node"
                },
                {
                    "name": "name",
                    "description": "The name of the associated data.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "If data is being set, the data to set.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object|result"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 223,
            "description": "Gets or sets the form value for the specified element.",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "element",
                    "description": "The element to get or set the form value for.",
                    "type": "DOM Node"
                },
                {
                    "name": "value",
                    "description": "When setting the form value, the value to set.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String|result"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 264,
            "description": "Retrieves the element's next sibling.",
            "itemtype": "method",
            "name": "next",
            "params": [
                {
                    "name": "element",
                    "description": "The element to start from, if more than one element is supplied, the first element in the list is used.",
                    "type": "DOM Node | DomUtilResult | Array"
                },
                {
                    "name": "filter",
                    "description": "A query used to filter the siblings of the element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Result"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 299,
            "description": "Retrieves the element's previous sibling.",
            "itemtype": "method",
            "name": "next",
            "params": [
                {
                    "name": "element",
                    "description": "The element to start from, if more than one element is supplied, the first element in the list is used.",
                    "type": "DOM Node | DomUtilResult | Array"
                },
                {
                    "name": "filter",
                    "description": "A query used to filter the siblings of the element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Result"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 334,
            "description": "Gets the direct children of the specified element.",
            "itemtype": "method",
            "name": "children",
            "params": [
                {
                    "name": "element",
                    "description": "The element to get the children of.",
                    "type": "DOM Node"
                },
                {
                    "name": "filter",
                    "description": "A query used to filter the children.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Result"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 352,
            "description": "Gets the height and width of the window.",
            "itemtype": "method",
            "name": "viewport",
            "return": {
                "description": "An object with width and height properties.",
                "type": "Object"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 363,
            "description": "Removes a class from the specified element(s).",
            "params": [
                {
                    "name": "elements",
                    "description": "The element(s) to remove a class from.",
                    "type": "DOM Node | Array | DomUtilResult"
                },
                {
                    "name": "className",
                    "description": "The class to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "DomUtilResult"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 379,
            "description": "Adds a class to the specified element(s).",
            "params": [
                {
                    "name": "elements",
                    "description": "The elements to add a class to.",
                    "type": "DOM Node | Array | DomUtilResult"
                },
                {
                    "name": "className",
                    "description": "The class to add.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "DomUtilResult"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 396,
            "description": "Determines if the specified element is a node list.",
            "params": [
                {
                    "name": "el",
                    "description": "The object to analyze.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the specified object is a node list.",
                "type": "Boolean"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 407,
            "description": "Gets the height and width of the specified element.\nReturns an object with width, height, outerWidth and outerHeight properties.",
            "itemtype": "method",
            "name": "dimensions",
            "params": [
                {
                    "name": "element",
                    "description": "The element to get the dimensions for.",
                    "type": "DOM Node"
                }
            ],
            "return": {
                "description": "An object with width, height, outerWidth and outerHeight properties."
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 425,
            "description": "Attaches an event handler to the specified element(s).",
            "params": [
                {
                    "name": "elements",
                    "description": "The elements to wire the event to.",
                    "type": "DOM Node | Array | DomUtilResult"
                },
                {
                    "name": "event",
                    "description": "The event to wire up.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the event is fired.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope to call the callback in.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Result"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 443,
            "description": "Detaches an event handler from the specified element(s).",
            "params": [
                {
                    "name": "elements",
                    "description": "The elements to wire the event to.",
                    "type": "DOM Node | Array | DomUtilResult"
                },
                {
                    "name": "event",
                    "description": "The event to wire up.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the event is fired.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Result"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 460,
            "description": "Creates a DOM Node, or wraps an existing DOM node in a DomUtilResult.",
            "params": [
                {
                    "name": "tagName",
                    "description": "The name of an HTML tag, or a DOM Node to wrap up.",
                    "type": "String | DOM Node"
                },
                {
                    "name": "className",
                    "description": "If a DOM Node is being created, a class name can be supplied to add to the DOM node.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DomUtilResult"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 482,
            "description": "Loops through each element in the specified array or DomUtilResult.",
            "params": [
                {
                    "name": "elements",
                    "description": "The elements to loop through.",
                    "type": "Array | DomUtilResult"
                },
                {
                    "name": "callback",
                    "description": "The function to call for each element in the array.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope to execute the callback in.",
                    "type": "Object"
                }
            ],
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 510,
            "description": "Gets the first element out of the specified Array or NodeList.",
            "params": [
                {
                    "name": "elements",
                    "description": "The elements to search.",
                    "type": "Array | NodeList"
                }
            ],
            "return": {
                "description": "The first element.",
                "type": "DOM Node"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 525,
            "description": "Gets all of the ancestors of the specified element(s).",
            "params": [
                {
                    "name": "elements",
                    "description": "The elements to get the parents for.",
                    "type": "DOM Node | Array | DomUtilResult"
                }
            ],
            "return": {
                "description": "The parents of all of the specified element(s).",
                "type": "DomUtilResult"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtil.js",
            "line": 551,
            "description": "Determines whether or not the specified element(s) have the specified class.",
            "params": [
                {
                    "name": "elements",
                    "description": "The elements to search.",
                    "type": "DOM Node | Array | DomUtilResult"
                },
                {
                    "name": "className",
                    "description": "The className to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether or not any of the specified elements have the specified className.",
                "type": "Boolean"
            },
            "class": "tomtom.dom.DomUtil",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 25,
            "description": "Gets or sets the HTML of the contained elements.\nWhen getting HTML, the first element contained within this DomUtilResult will be used.",
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "value",
                    "description": "The value to set.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String|tomtom.dom.DomUtilResult"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 50,
            "description": "Gets or sets a css property for the contained elements.\nWhen getting a css property, the first contained element will be used.",
            "itemtype": "method",
            "name": "css",
            "params": [
                {
                    "name": "property",
                    "description": "The css property to get or set.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String|tomtom.dom.DomUtilResult"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 75,
            "description": "Appends the specified HTMl or DOM node to the contained elements.\nNote that if a DOM Node is passed, it will be added to the first contained element.\nDOM nodes can't be added in more than one location.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "value",
                    "description": "The HTML or DOM Node to append to the contained elements.",
                    "type": "String|DOM Node"
                }
            ],
            "return": {
                "description": "",
                "type": "tomtom.dom.DomUtilResult"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 104,
            "description": "Gets the first contained element.",
            "itemtype": "method",
            "name": "first",
            "return": {
                "description": "",
                "type": "DOM Node"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 113,
            "description": "Gets the element at the specified index.\nNote if index is not specified the first element is returned.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the element to retrieve.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DOM Node"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 133,
            "description": "Executes the specified function for each contained element.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute for each element.\n The element and the element index will be passed as parameters respectively.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "tomtom.dom.DomUtilResult"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 148,
            "description": "Gets or sets the form value for the contained elements.\nWhen getting, the value of the first element is returned.",
            "params": [
                {
                    "name": "value",
                    "description": "The value to set.",
                    "type": "String",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "val",
            "return": {
                "description": "",
                "type": "tomtom.dom.DomUtilResult"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 171,
            "description": "Searches all of the children (recursively) using the specified query.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "query",
                    "description": "The query used to filter all children.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "tomtom.dom.DomUtilResult"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 182,
            "description": "Attaches an event handler to the contained elements.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "The name of the event to bind to.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when the event is triggered.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The context in which to execute the callback.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 194,
            "description": "Detaches an event handler from the contained elements.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "event",
                    "description": "The name of the event to bind to.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when the event is triggered.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 205,
            "description": "Gets or sets an attribute for the contained elements.\nWhen getting, the attribute of the first element is returned.",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to get or set.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String|tomtom.dom.DomUtilResult"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 217,
            "description": "Gets or sets associated data for the contained elements.\nWhen getting associated data, the data from the first element is returned.",
            "itemtype": "method",
            "name": "data",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the associated data.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The data to set.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object|tomtom.dom.DomUtilResult"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 229,
            "description": "Removes the specified attribute from the contained elements.",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "tomtom.dom.DomUtilResult"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 240,
            "description": "Gets the next sibling of the first contained element.",
            "itemtype": "method",
            "name": "next",
            "params": [
                {
                    "name": "filter",
                    "description": "The filter to apply to the siblings.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "tomtom.dom.DomUtilResult"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 250,
            "description": "Gets the previous sibling of the first contained element.",
            "itemtype": "method",
            "name": "prev",
            "params": [
                {
                    "name": "filter",
                    "description": "The filter to apply to the siblings.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "tomtom.dom.DomUtilResult"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 260,
            "description": "Gets the children of the contained elements.",
            "itemtype": "method",
            "name": "children",
            "params": [
                {
                    "name": "filter",
                    "description": "The filter to apply to the children.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "tomtom.dom.DomUtilResult"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 270,
            "description": "Determines how many elements are contained.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": ""
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 279,
            "description": "Adds a class to all of the contained elements.",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "className",
                    "description": "The name of the class to add.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "tomtom.dom.DomUtilResult"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 290,
            "description": "Removes the specified class from the contained elements.",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "className",
                    "description": "The name of the class to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "tomtom.dom.DomUtilResult"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 301,
            "description": "Gets offset information for the first contained element.\nThe returned object will have width / height properties that specify the offset from the\nelement's offset parent.",
            "itemtype": "method",
            "name": "offset",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 312,
            "description": "Gets the positioning information for the first contained element.\nThe returned object will have width / height properties that specify the offset from the edges of the window.",
            "itemtype": "method",
            "name": "position",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 322,
            "description": "Gets the offsetHeight of the first contained element.",
            "itemtype": "method",
            "name": "offsetHeight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 337,
            "description": "Gets the offsetWidth of the first contained element.",
            "itemtype": "method",
            "name": "offsetWidth",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 352,
            "description": "Gets the height of the first contained element.",
            "itemtype": "method",
            "name": "height",
            "return": {
                "description": "The height of the first contained element.",
                "type": "Number"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 369,
            "description": "Gets the width of the first contained element.",
            "itemtype": "method",
            "name": "width",
            "return": {
                "description": "The width of the first contained element.",
                "type": "Number"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 386,
            "description": "Clears everything from all of the contained elements.",
            "return": {
                "description": "",
                "type": "DomUtilResult"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 403,
            "description": "Hides all of the contained elements, setting the CSS display property to \"none\".",
            "return": {
                "description": "",
                "type": "DomUtilResult"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 418,
            "description": "Shows all of the contained elements, setting the CSS display property to \"block\";",
            "return": {
                "description": "",
                "type": "DomUtilResult"
            },
            "chainable": 1,
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 433,
            "description": "Gets all parents of all contained elements.",
            "return": {
                "description": "",
                "type": "DomUtilResult"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\dom\\DomUtilResult.js",
            "line": 443,
            "description": "Determines whether or not any of the contained elements have the specified className.",
            "params": [
                {
                    "name": "className",
                    "description": "The className to search for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "whether or not the specified className exists on any contained element.",
                "type": "Boolean"
            },
            "class": "tomtom.dom.DomUtilResult",
            "namespace": "tomtom.dom"
        },
        {
            "file": "src\\tomtom\\layers\\TrafficIncidentLayer.js",
            "line": 74,
            "description": "Updates the traffic incident icons using the specified traffic model.  The traffic model can be retrieved from a call to\nthe Viewport service.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "animation",
                    "description": "Whether or not to animate any markers that are updated.",
                    "type": "Boolean"
                },
                {
                    "name": "trafficModel",
                    "description": "The traffic model identifier which is passed to the traffic service.",
                    "type": "String"
                }
            ],
            "class": "tomtom.layers.TrafficIncidentLayer",
            "namespace": "tomtom.layers"
        },
        {
            "file": "src\\tomtom\\layers\\TrafficIncidentLayer.js",
            "line": 200,
            "description": "Sets the current traffic model.",
            "itemtype": "method",
            "name": "setTrafficModel",
            "params": [
                {
                    "name": "trafficModel",
                    "description": "The traffic model that should be used by the layer.",
                    "type": "String"
                }
            ],
            "class": "tomtom.layers.TrafficIncidentLayer",
            "namespace": "tomtom.layers"
        },
        {
            "file": "src\\tomtom\\layers\\TrafficLayer.js",
            "line": 46,
            "description": "Updates the traffic layer using the specified traffic model.\nThis will force all of the tiles to redraw.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "trafficModel",
                    "description": "The traffic model used to access the traffic service.",
                    "type": "String"
                }
            ],
            "class": "tomtom.layers.TrafficLayer",
            "namespace": "tomtom.layers"
        },
        {
            "file": "src\\tomtom\\layers\\TrafficLayer.js",
            "line": 64,
            "description": "Sets the traffic model that the layer will use when passed to the tile service.",
            "itemtype": "method",
            "name": "setTrafficModel",
            "params": [
                {
                    "name": "trafficModel",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "tomtom.layers.TrafficLayer",
            "namespace": "tomtom.layers"
        },
        {
            "file": "src\\tomtom\\services\\GeocodingService.js",
            "line": 24,
            "description": "Executes a geocoding request for the specified address.\nThis will take an address and return the latitude and longitude of the address.",
            "example": [
                "\n var service = new tomtom.services.GeocodingService(\"API Key\");\n service.geocode(\"11 Lafayette St, Lebanon, NH\", function(response) { ... });"
            ],
            "itemtype": "method",
            "name": "geocode",
            "params": [
                {
                    "name": "address",
                    "description": "The address to geocode, or an object for a structured geocode call.\n See http://developer.tomtom.com/docs/read/map_toolkit/web_services/geocoding_single_call/Request for details on which parameters can be passed to a structured call.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options passed to the geocoding service.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "language",
                            "description": "The two-character ISO code for the output language. Supported languages are de, en, es, fr, it, nl.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "maxResults",
                            "description": "The maximum number of hits for the geocoder to return.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when a response is received from the geocoding service.",
                    "type": "Function"
                }
            ],
            "class": "tomtom.services.GeocodingService",
            "namespace": "tomtom.services"
        },
        {
            "file": "src\\tomtom\\services\\GeocodingService.js",
            "line": 88,
            "description": "Executes a reverse geocoding request, which allows a latitude and longitude to be turned into an address.",
            "example": [
                "\n var service = new tomtom.services.GeocodingService(\"API Key\");\n service.reverseGeocode(43.67863, -72.26259, function(response) { ... });"
            ],
            "itemtype": "method",
            "name": "reverseGeocode",
            "params": [
                {
                    "name": "latitude",
                    "description": "The latitude to look up the address for.",
                    "type": "Number"
                },
                {
                    "name": "longitude",
                    "description": "The longitude to look up the address for.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Additional options to pass to the geocoding service.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "type",
                            "description": "Defines the importance of the returned value: are we looking for the name of a village (Regional), or the large city it's close to (International)?\nDifferent values can result in different fields in the response, or different values for the same field.\nBasic (default) - Small number of fields. Contains formated address (concatenated data).\nAll - List of results for all types together.\nInternational - Values of nearest big locations.\nNational - Values of nearest medium locations.\nRegional - Values of nearest locations.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "projection",
                            "description": "The projection used to specify the coordinates in the request and response.  Supported values are\n EPSG4326 or EPSG900913.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "language",
                            "description": "The two-character ISO code for the output language. Supported languages are de, en, es, fr, it, nl.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when a response is received from geocoding service.",
                    "type": "Function"
                }
            ],
            "class": "tomtom.services.GeocodingService",
            "namespace": "tomtom.services"
        },
        {
            "file": "src\\tomtom\\services\\HDTRegionsService.js",
            "line": 22,
            "description": "Gets the HD Traffic region information, which contains incident information at a country level.",
            "itemtype": "method",
            "name": "getRegions",
            "params": [
                {
                    "name": "options",
                    "description": "Options to supply to the service.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "language",
                            "description": "The two character ISO code of the output language to use for the regions and country names. Supported languages are af, cs, da, de, en, es, fi, fr, hu, it, nl, no, pl, pt, sv, tr.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "en"
                        },
                        {
                            "name": "projection",
                            "description": "The map projection for the coordinates returned by the API. Supported projections are EPSG4326 and EPSG900913.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "EPSG4326"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when the service returns a response.",
                    "type": "Function"
                }
            ],
            "class": "tomtom.services.HDTRegionsService",
            "namespace": "tomtom.services"
        },
        {
            "file": "src\\tomtom\\services\\InitializeService.js",
            "line": 22,
            "description": "Gets copyright information for the Map Toolkit API.",
            "itemtype": "method",
            "name": "getCopyrightInfo",
            "params": [
                {
                    "name": "options",
                    "description": "The options to pass to the initialize call.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "projection",
                            "description": "The projection to use for the points returned by the initialize call. Supported projections are EPSG4326 and EPSG900913.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "EPSG900913"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The method to call when the initialize call completes.",
                    "type": "Function"
                }
            ],
            "class": "tomtom.services.InitializeService",
            "namespace": "tomtom.services"
        },
        {
            "file": "src\\tomtom\\services\\LegacyGeocodingService.js",
            "line": 25,
            "description": "Executes a geocoding request for the specified address.\nThis will take an address and return the latitude and longitude of the address.",
            "example": [
                "\n\tvar service = new tomtom.services.GeocodingService(\"API Key\");\n\tservice.geocode(\"11 Lafayette St, Lebanon, NH\", function(response) { ... });"
            ],
            "itemtype": "method",
            "name": "geocode",
            "params": [
                {
                    "name": "address",
                    "description": "The address to geocode, or an object for a structured geocode call.\n See http://developer.tomtom.com/docs/read/map_toolkit/web_services/geocoding_single_call/Request for details on which parameters can be passed to a structured call.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options passed to the geocoding service.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "language",
                            "description": "The two-character ISO code for the output language. Supported languages are de, en, es, fr, it, nl.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "maxResults",
                            "description": "The maximum number of hits for the geocoder to return.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when a response is received from the geocoding service.",
                    "type": "Function"
                }
            ],
            "class": "tomtom.services.LegacyGeocodingService",
            "namespace": "tomtom.services"
        },
        {
            "file": "src\\tomtom\\services\\LegacyGeocodingService.js",
            "line": 79,
            "description": "Executes a reverse geocoding request, which allows a latitude and longitude to be turned into an address.",
            "example": [
                "\n var service = new tomtom.services.GeocodingService(\"API Key\");\n service.reverseGeocode(-72.26259, 43.67863, function(response) { ... });"
            ],
            "itemtype": "method",
            "name": "reverseGeocode",
            "params": [
                {
                    "name": "longitude",
                    "description": "The longitude to look up the address for.",
                    "type": "Number"
                },
                {
                    "name": "latitude",
                    "description": "The latitude to look up the address for.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Additional options to pass to the geocoding service.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "type",
                            "description": "Defines the importance of the returned value: are we looking for the name of a village (Regional), or the large city it's close to (International)?\nDifferent values can result in different fields in the response, or different values for the same field.\nBasic (default) - Small number of fields. Contains formated address (concatenated data).\nAll - List of results for all types together.\nInternational - Values of nearest big locations.\nNational - Values of nearest medium locations.\nRegional - Values of nearest locations.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "projection",
                            "description": "The projection used to specify the coordinates in the request and response.  Supported values are\n EPSG4326 or EPSG900913.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "language",
                            "description": "The two-character ISO code for the output language. Supported languages are de, en, es, fr, it, nl.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when a response is received from geocoding service.",
                    "type": "Function"
                }
            ],
            "class": "tomtom.services.LegacyGeocodingService",
            "namespace": "tomtom.services"
        },
        {
            "file": "src\\tomtom\\services\\NavKitRoutingService.js",
            "line": 23,
            "description": "Gets routing information for the specified points.",
            "example": [
                "\n var points = [\n   [ 43.20846, -71.53686 ],\n   [ 42.35779, -71.05976 ]\n ];\n var service = new tomtom.services.RoutingService(\"API Key\");\n service.getRoute(points, function(response) { ... });"
            ],
            "itemtype": "method",
            "name": "getRoute",
            "params": [
                {
                    "name": "points",
                    "description": "An array of L.LatLng objects.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Additional options to pass to the routing call.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "avoidTraffic",
                            "description": "Indicates if traffic information is used to plan the route.\n Only relevant for routeType of Quickest and AvoidMotorway.\n When includeTraffic is set to false this flag is ignored.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "includeTraffic",
                            "description": "Indicates if traffic information is used to describe delays in the route.\n Not relevant where routeType is Walk or Bicycle.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "language",
                            "description": "The two character ISO code of the output language to use for the route instructions. Supported languages are ca, cs, da, de, en, es, fi, fr, hu, it, nl, no, pl, pt, sk, sv, tr.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "en"
                        },
                        {
                            "name": "day",
                            "description": "The day of departure. Valid options are today, tomorrow, monday, tuesday, wednesday, thursday, friday, saturday, sunday.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "today"
                        },
                        {
                            "name": "time",
                            "description": "Time of departure, either now or the number of minutes since midnight.  Note that now (default value) is only valid when day=today (default).",
                            "type": "String",
                            "optional": true,
                            "optdefault": "now"
                        },
                        {
                            "name": "trafficModelId",
                            "description": "Traffic model ID to use in the route calculation. The Traffic Model ID can be obtained from the Viewport service.\n If this is omitted, then the most recent ID will be used.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "avoidTolls",
                            "description": "Indicates whether toll roads have to be avoided during route planning.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "includeInstructions",
                            "description": "Indicates if turn-by-turn instructions should be returned in the response.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "projection",
                            "description": "The projection used to specify the coordinates in the request and response.  Supported values are\n EPSG900913 and EPSG4326.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "EPSG4326"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "A function to be called when the routing call returns a response.",
                    "type": "Function"
                }
            ],
            "class": "tomtom.services.RoutingService",
            "namespace": "tomtom.services"
        },
        {
            "file": "src\\tomtom\\services\\RoutingService.js",
            "line": 24,
            "description": "Gets routing information for the specified points.",
            "example": [
                "\n var points = [\n   [ 43.20846, -71.53686 ],\n   [ 42.35779, -71.05976 ]\n ];\n var service = new tomtom.services.RoutingService(\"API Key\");\n service.getRoute(points, function(response) { ... });"
            ],
            "itemtype": "method",
            "name": "getRoute",
            "params": [
                {
                    "name": "points",
                    "description": "An array of L.LatLng objects.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Additional options to pass to the routing call.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "avoidTraffic",
                            "description": "Indicates if traffic information is used to plan the route.\n Only relevant for routeType of Quickest and AvoidMotorway.\n When includeTraffic is set to false this flag is ignored.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "includeTraffic",
                            "description": "Indicates if traffic information is used to describe delays in the route.\n Not relevant where routeType is Walk or Bicycle.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "language",
                            "description": "The two character ISO code of the output language to use for the route instructions. Supported languages are ca, cs, da, de, en, es, fi, fr, hu, it, nl, no, pl, pt, sk, sv, tr.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "en"
                        },
                        {
                            "name": "day",
                            "description": "The day of departure. Valid options are today, tomorrow, monday, tuesday, wednesday, thursday, friday, saturday, sunday.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "today"
                        },
                        {
                            "name": "time",
                            "description": "Time of departure, either now or the number of minutes since midnight.  Note that now (default value) is only valid when day=today (default).",
                            "type": "String",
                            "optional": true,
                            "optdefault": "now"
                        },
                        {
                            "name": "trafficModelId",
                            "description": "Traffic model ID to use in the route calculation. The Traffic Model ID can be obtained from the Viewport service.\n If this is omitted, then the most recent ID will be used.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "avoidTolls",
                            "description": "Indicates whether toll roads have to be avoided during route planning.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "includeInstructions",
                            "description": "Indicates if turn-by-turn instructions should be returned in the response.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "projection",
                            "description": "The projection used to specify the coordinates in the request and response.  Supported values are\n EPSG900913 and EPSG4326.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "EPSG4326"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "A function to be called when the routing call returns a response.",
                    "type": "Function"
                }
            ],
            "class": "tomtom.services.RoutingService",
            "namespace": "tomtom.services"
        },
        {
            "file": "src\\tomtom\\services\\TrafficService.js",
            "line": 23,
            "description": "Gets traffic incident information for the specified window and zoom.\nThe window should be specified as an object with left, bottom, right, and top properties.",
            "example": [
                "\n var window = {\n\t\tleft: -78.40152658903608,\n\t\tbottom: 39.19651962955681,\n\t\tright: -59.054602760910434,\n\t\ttop: 44.89325482670453\n\t}\n\n var trafficService = new tomtom.services.TrafficService(\"API Key\");\n trafficService.getTrafficModel(window, 7, function(response) { ... });"
            ],
            "itemtype": "method",
            "name": "getTrafficModel",
            "params": [
                {
                    "name": "window",
                    "description": "The bounds in which to retrieve the traffic information.",
                    "type": "Object"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level at which to retrieve the traffic information.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Additional options to be passed to the traffic call.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "language",
                            "description": "The two-character ISO code for the output language. Affects the &&lt;c&&gt; (cause) and &&lt;d&&gt; (description) fields. If this is not specified, those fields will not be included in the reply.\n Supported languages are ca, cs, da, de, en, es, fi, fr, hu, it, nl, no, pl, pt, sk, sv, tr.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "en"
                        },
                        {
                            "name": "projection",
                            "description": "The projection used to specify the coordinates in the request and response.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "EPSG4326"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "tomtom.services.TrafficService",
            "namespace": "tomtom.services"
        },
        {
            "file": "src\\tomtom\\services\\ViewportService.js",
            "line": 20,
            "description": "Gets information about the current viewport including the current traffic model.\nThis service call is used to synchronize different traffic components such as routing, traffic incidents and traffic flow using the\ntraffic model id.",
            "example": [
                "\n var window = {\n\t\tleft: -78.40152658903608,\n\t\tbottom: 39.19651962955681,\n\t\tright: -59.054602760910434,\n\t\ttop: 44.89325482670453\n\t}\n\n var service = new tomtom.services.ViewportService(\"API Key\");\n service.getViewportModel(window, 7, window, 7, function(response) { ... });"
            ],
            "itemtype": "method",
            "name": "getViewportModel",
            "params": [
                {
                    "name": "window",
                    "description": "An object which describes the current map bounds.  This object should have left, bottom, right and top properties.",
                    "type": "Object"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level that the map is currently at.",
                    "type": "Number"
                },
                {
                    "name": "overviewWindow",
                    "description": "If an overview map is being used, this can be supplied to get viewport information for the\n overview map's bounds.  If an overview window is not used or copyright information isn't needed, the same bounds can be supplied as the main window.",
                    "type": "Object"
                },
                {
                    "name": "overviewZoom",
                    "description": "The zoom level of the overview map.  If there is no overview map, or copyright info isn't needed, the same zoom level as the main window\n can be used.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Additional options to pass to the Viewport call.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "projection",
                            "description": "The projection to be used for the bounding box.  Must be either EPSG4326 or EPSG900913.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when the call to the Viewport service completes.",
                    "type": "Function"
                }
            ],
            "class": "tomtom.services.ViewportService",
            "namespace": "tomtom.services"
        },
        {
            "file": "src\\tomtom\\AjaxUtil.js",
            "line": 10,
            "description": "Executes a request and processes the response as JSON.",
            "itemtype": "method",
            "name": "getJSON",
            "params": [
                {
                    "name": "options",
                    "description": "Specifies the details of the request.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The URL to request.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "The callback to execute when the request completes.",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "class": "tomtom.AjaxUtil",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\AjaxUtil.js",
            "line": 39,
            "description": "Executes a request and processes the response as JSONP.\nThis method uses Lightweight JSONP fetcher\nCopyright 2010-2012 Erik Karlsson. All rights reserved.\nBSD licensed\nhttps://github.com/IntoMethod/Lightweight-JSONP",
            "itemtype": "method",
            "name": "getJSONP",
            "params": [
                {
                    "name": "options",
                    "description": "Specifies the details of the request.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The URL to request.",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "The data to pass as GET parameters with the request.",
                            "type": "Object"
                        },
                        {
                            "name": "callback",
                            "description": "The callback to execute when the request completes.",
                            "type": "Function"
                        },
                        {
                            "name": "callbackParam",
                            "description": "The parameter name that the endpoint expects to qualify the JSONP callback function.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "tomtom.AjaxUtil",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Animation.js",
            "line": 162,
            "description": "Starts the animation.",
            "itemtype": "method",
            "name": "play",
            "class": "tomtom.Animation",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Animation.js",
            "line": 192,
            "description": "Cancels the animation and returns the elements to their original position.",
            "class": "tomtom.Animation",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\CustomMarker.js",
            "line": 37,
            "description": "Sets the CSS class of the icon.",
            "itemtype": "method",
            "name": "setClassName",
            "params": [
                {
                    "name": "className",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "tomtom.CustomMarker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\CustomMarker.js",
            "line": 48,
            "description": "Sets the HTML content of the marker.",
            "params": [
                {
                    "name": "html",
                    "description": "The HTML string or DOM node to set the content to.",
                    "type": "String | DOM Node"
                }
            ],
            "class": "tomtom.CustomMarker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Main.js",
            "line": 99,
            "description": "Sets the image path that will be used throughout the SDK.",
            "itemtype": "method",
            "name": "tomtom.setImagePath",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "- The path to the directory where images are stored."
                }
            ],
            "class": "tomtom.Main",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Main.js",
            "line": 119,
            "description": "The base path for all API calls.",
            "class": "tomtom.Main",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Main.js",
            "line": 124,
            "description": "The base service path for services (everything but map tiles).",
            "class": "tomtom.Main",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Main.js",
            "line": 129,
            "description": "Contains build information for the TomTom JavaScript SDK.",
            "itemtype": "property",
            "name": "tomtom.releaseInfo",
            "type": "Object",
            "static": 1,
            "class": "tomtom.Main",
            "namespace": "tomtom",
            "subprops": [
                {
                    "name": "version",
                    "description": "The version information for the SDK.",
                    "type": "String"
                },
                {
                    "name": "build",
                    "description": "The build number for the SDK.",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src\\tomtom\\Main.js",
            "line": 140,
            "description": "Determines whether or not debug output should be displayed in the console.",
            "itemtype": "property",
            "name": "tomtom.isDebugMode",
            "type": "Boolean",
            "static": 1,
            "class": "tomtom.Main",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Main.js",
            "line": 147,
            "description": "A method that can be overridden in order to log how many calls are being made to the LBS APIs.",
            "params": [
                {
                    "name": "serviceName",
                    "description": ""
                }
            ],
            "class": "tomtom.Main",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Main.js",
            "line": 153,
            "description": "Allows the Map Toolkit API key to be set in once place and used by the TomTom Map and services without specifying the key\neach time a new object is constructed.",
            "itemtype": "property",
            "name": "tomtom.apiKey",
            "static": 1,
            "example": [
                "\n // set a global api key\n tomtom.apiKey = \"API Key\";\n\n // the map will use tomtom.apiKey\n var map = new tomtom.Map({\n   domNode: \"map\"\n });\n\n // same for services\n var service = new tomtom.services.GeocodingService();\n service.geocode(\"11 Lafayette St, Lebanon, NH\", function(response) { ... });\n\n // passing an API Key to a map or service will override the global key.\n var map2 = new tomtom.Map({\n\t\tapiKey: \"Another API Key\",\n\t\tdomNode: \"map\"\n\t});\n"
            ],
            "class": "tomtom.Main",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Main.js",
            "line": 179,
            "description": "Language information that is used for any text display generated within the SDK.\nSee the tomtom.i18n.js file, which contains all extra languages.  The en-US languages information is embedded\nwithin the core of the JavaScript SDK.",
            "static": 1,
            "itemtype": "property",
            "name": "tomtom.languages",
            "type": "Object",
            "class": "tomtom.Main",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1,
            "description": "The map widget allows a user to add a map to the page.",
            "author": "Kyle Pinette",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 267,
            "description": "Enables or disables live traffic display.",
            "itemtype": "method",
            "name": "setDisplayTraffic",
            "params": [
                {
                    "name": "value",
                    "description": "Whether or not to display live traffic information on the map.",
                    "type": "Boolean"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 306,
            "description": "Destroys the map and any resources it is holding onto.  This method will remove the Map's inner contents from the DOM.",
            "itemtype": "method",
            "name": "destroy",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 400,
            "description": "Displays a route on the map using the TomTom Map Toolkit's Routing call.",
            "itemtype": "method",
            "name": "displayRoute",
            "params": [
                {
                    "name": "points",
                    "description": "The points which make up the route.  There must be at least 2 points, and at most 5 points specified.\n If the points are specified as strings, the Map will assume they are addresses and apply geocoding.  Leaflet L.LatLng objects can also be passed to\nuse points instead of addresses.  Addresses and L.LatLng Objects can be intermixed within the points.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Options to pass to the Map Toolkit Routing call.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "key",
                            "description": "The API key to use.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "routeType",
                            "description": "The route type to use.  Must be one of the following:\nQuickest, Shortest, AvoidMotorway, Walk, Bicycle, SpeedLimited, Green.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "Quickest"
                        },
                        {
                            "name": "avoidTraffic",
                            "description": "Whether or not to avoid traffic when calculating the route.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "day",
                            "description": "The day of departure.  Must be one of the following: today, tomorrow, monday, tuesday, wednesday, thursday, friday, saturday, sunday",
                            "type": "String",
                            "optional": true,
                            "optdefault": "today"
                        },
                        {
                            "name": "time",
                            "description": "Time of departure, either now or the number of minutes since midnight.\n Note that now (default value) is only valid when day=today (default).",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "now"
                        },
                        {
                            "name": "avoidTolls",
                            "description": "Whether or not to avoid tolls when calculating the route.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "A callback to execute once the route has been executed.  The routing response is passed as the only argument to the callback\n once the routing call has been completed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 460,
            "description": "Highlights a route instruction for the currently displayed route.  This can be used to display a directional arrow at the instruction index specified.",
            "itemtype": "method",
            "name": "displayRouteInstruction",
            "params": [
                {
                    "name": "instructionIndex",
                    "description": "The index of the instruction that should be highlighted.",
                    "type": "Number"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 484,
            "description": "Removes the current route from the map.",
            "itemtype": "method",
            "name": "clearRouting",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 519,
            "description": "Gets the current route information.",
            "itemtype": "method",
            "name": "getCurrentRoute",
            "return": {
                "description": "The route response from the routing call.",
                "type": "Object"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 528,
            "description": "Sets the context menu for the map.\nThe context menu will be displayed when the user right clicks the map.",
            "params": [
                {
                    "name": "contextMenu",
                    "description": "The context menu to display when the map is right clicked.",
                    "type": "tomtom.ContextMenu"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 550,
            "description": "Displays a modal loading message which will prevent the user from performing any action until hideLoadingMessage is called.",
            "itemtype": "method",
            "name": "displayLoadingMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message to be displayed along with the loading graphic.",
                    "type": "String"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 583,
            "description": "Hides the loading message which is created by calling displayLoadingMessage.",
            "itemtype": "method",
            "name": "hideLoadingMessage",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 599,
            "description": "Gets the current traffic incidents that are being displayed.",
            "itemtype": "method",
            "name": "getTrafficIncidents",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 613,
            "description": "Gets a traffic marker by the specified incident id.",
            "itemtype": "method",
            "name": "getTrafficMarkerByIncidentId",
            "params": [
                {
                    "name": "id",
                    "description": "The incident id of the marker to retrieve."
                }
            ],
            "return": {
                "description": "The marker with the specified incident id."
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1340,
            "description": "Adds the given control to the map.",
            "itemtype": "method",
            "name": "addControl",
            "params": [
                {
                    "name": "control",
                    "description": "The control to add to the map.",
                    "type": "L.IControl"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1346,
            "description": "Removes the given control from the map.",
            "itemtype": "method",
            "name": "removeControl",
            "params": [
                {
                    "name": "control",
                    "description": "The control to remove from the map.",
                    "type": "L.IControl"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1352,
            "description": "Sets the view of the map (geographical center and zoom). If forceReset is set to true, the map is reloaded even if it's eligible for pan or zoom animation (false by default).",
            "itemtype": "method",
            "name": "setView",
            "params": [
                {
                    "name": "center",
                    "description": "The center location to pan the map to.",
                    "type": "L.LatLng"
                },
                {
                    "name": "zoom",
                    "description": "The zoom level to set the map to.",
                    "type": "Number"
                },
                {
                    "name": "forceReset",
                    "description": "If true, the map is reloaded even if it's eligible for pan or zoom animation.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1360,
            "description": "Sets the zoom level of the map.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "The zoom level to set the map to.",
                    "type": "Number"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1366,
            "description": "Increases the zoom of the map by delta (1 by default).",
            "itemtype": "method",
            "name": "zoomIn",
            "params": [
                {
                    "name": "delta",
                    "description": "The amount to zoom by.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1372,
            "description": "Decreases the zoom of the map by delta (1 by default).",
            "itemtype": "method",
            "name": "zoomOut",
            "params": [
                {
                    "name": "delta",
                    "description": "The amount to zoom by.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1378,
            "description": "Sets a map view that contains the given geographical bounds with the maximum zoom level possible.",
            "itemtype": "method",
            "name": "fitBounds",
            "params": [
                {
                    "name": "bounds",
                    "description": "The bounds to fit the map view to.",
                    "type": "L.LatLngBounds"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1384,
            "description": "Sets a map view that mostly contains the whole world with the maximum zoom level possible.",
            "itemtype": "method",
            "name": "fitWorld",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1389,
            "description": "Pans the map to a given center. Makes an animated pan if new center is not more than one screen away from the current one.",
            "itemtype": "method",
            "name": "panTo",
            "params": [
                {
                    "name": "latlng",
                    "description": "The lat / lng to pan to.",
                    "type": "L.LatLng"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1395,
            "description": "Pans the map to the closest view that would lie inside the given bounds (if it's not already).",
            "itemtype": "method",
            "name": "panInsideBounds",
            "params": [
                {
                    "name": "bounds",
                    "description": "The bounds to try and pan to.",
                    "type": "L.LatLngBounds"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1401,
            "description": "Pans the map by a given number of pixels (animated).",
            "itemtype": "method",
            "name": "panBy",
            "params": [
                {
                    "name": "point",
                    "description": "The number of x / y units to pan the map by.",
                    "type": "L.Point"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1407,
            "description": "Checks if the map container size changed and updates the map if so — call it after you've changed the map size dynamically. If animate is true, map animates the update.",
            "itemtype": "method",
            "name": "invalidateSize",
            "params": [
                {
                    "name": "animate",
                    "description": "If true, the resize will be animated.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1413,
            "description": "Restricts the map view to the given bounds (see map maxBounds option).",
            "itemtype": "method",
            "name": "setMaxBounds",
            "params": [
                {
                    "name": "bounds",
                    "description": "The bounds to restrict the map to.",
                    "type": "L.LatLngBound"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1419,
            "description": "Tries to locate the user using Geolocation API, firing locationfound event with location data on success or locationerror event on failure, and optionally sets the map view to the user location with respect to detection accuracy (or to the world view if geolocation failed). See Locate options for more details.",
            "itemtype": "method",
            "name": "locate",
            "params": [
                {
                    "name": "options",
                    "description": "The options to use when locating the user.",
                    "type": "L.LocateOptions",
                    "optional": true,
                    "props": [
                        {
                            "name": "watch",
                            "description": "If true, starts continous watching of location changes (instead of detecting it once) using W3C watchPosition method. You can later stop watching using map.stopLocate() method.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "setView",
                            "description": "If true, automatically sets the map view to the user location with respect to detection accuracy, or to world view if geolocation failed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "maxZoom",
                            "description": "The maximum zoom for automatic view setting when using `setView` option.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "Infinity"
                        },
                        {
                            "name": "timeout",
                            "description": "Number of millisecond to wait for a response from geolocation before firing a locationerror event.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "10000"
                        },
                        {
                            "name": "maximumAge",
                            "description": "Maximum age of detected location. If less than this amount of milliseconds passed since last geolocation response, locate will return a cached location.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "enableHighAccuracy",
                            "description": "Enables high accuracy, see http://dev.w3.org/geo/api/spec-source.html#high-accuracydescription.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1431,
            "description": "Stops watching location previously initiated by map.locate({watch: true}).",
            "itemtype": "method",
            "name": "stopLocate",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1436,
            "description": "Returns the geographical center of the map view.",
            "itemtype": "method",
            "name": "getCenter",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1441,
            "description": "Returns the current zoom of the map view.",
            "itemtype": "method",
            "name": "getZoom",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1446,
            "description": "Returns the minimum zoom level of the map.",
            "itemtype": "method",
            "name": "getMinZoom",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1451,
            "description": "Returns the maximum zoom level of the map.",
            "itemtype": "method",
            "name": "getMaxZoom",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1456,
            "description": "Returns the LatLngBounds of the current map view.",
            "itemtype": "method",
            "name": "getBounds",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1461,
            "description": "Returns the maximum zoom level on which the given bounds fit to the map view in its entirety. If inside (optional) is set to true, the method instead returns the minimum zoom level on which the map view fits into the given bounds in its entirety.",
            "getboundszoom": "",
            "params": [
                {
                    "name": "bounds",
                    "description": "The bounds to get the zoom level for.",
                    "type": "L.LatLngBounds"
                },
                {
                    "name": "inside",
                    "description": "If true, determines the minimum zoom in which the map view will fit.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1468,
            "description": "Returns the current size of the map container.",
            "itemtype": "method",
            "name": "getSize",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1473,
            "description": "Adds the given layer to the map. If optional insertAtTheBottom is set to true, the layer is inserted under all others (useful when switching base tile layers).",
            "itemtype": "method",
            "name": "addLayer",
            "params": [
                {
                    "name": "insertAtTheBottom",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1479,
            "description": "Removes the given layer from the map.",
            "itemtype": "method",
            "name": "removeLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "The layer to remove.",
                    "type": "L.ILayer"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1485,
            "description": "Returns true if the given layer is currently added to the map.",
            "itemtype": "method",
            "name": "hasLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "The layer to check.",
                    "type": "L.ILayer"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1491,
            "description": "Opens the specified popup while closing the previously opened (to make sure only one is opened at one time for usability).",
            "itemtype": "method",
            "name": "openPopup",
            "params": [
                {
                    "name": "popup",
                    "description": "The popup to open.",
                    "type": "Popup"
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1497,
            "description": "Closes the popup opened with openPopup.",
            "itemtype": "method",
            "name": "closePopup",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1502,
            "description": "Registers an event handler for the map.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event to attach to.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the event is Fired.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope to execute the callback in.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1510,
            "description": "Returns the map layer point that corresponds to the given geographical coordinates (useful for placing overlays on the map).",
            "itemtype": "method",
            "name": "latLngToLayerPoint",
            "params": [
                {
                    "name": "latlng",
                    "description": "",
                    "type": "L.LatLng"
                }
            ],
            "return": {
                "description": "L.Point"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1517,
            "description": "Returns the geographical coordinates of a given map layer point.",
            "itemtype": "method",
            "name": "layerPointToLatLng",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "L.Point"
                }
            ],
            "return": {
                "description": "L.LatLng"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1524,
            "description": "Converts the point relative to the map container to a point relative to the map layer.",
            "itemtype": "method",
            "name": "containerPointToLayerPoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "L.Point"
                }
            ],
            "return": {
                "description": "L.Point"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1531,
            "description": "Converts the point relative to the map layer to a point relative to the map container.",
            "itemtype": "method",
            "name": "layerPointToContainerPoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "L.Point"
                }
            ],
            "return": {
                "description": "L.Point"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1538,
            "description": "Returns the map container point that corresponds to the given geographical coordinates.",
            "itemtype": "method",
            "name": "latLngToContainerPoint",
            "params": [
                {
                    "name": "latlng",
                    "description": "",
                    "type": "L.LatLng"
                }
            ],
            "return": {
                "description": "L.Point"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1545,
            "description": "Returns the geographical coordinates of a given map container point.",
            "itemtype": "method",
            "name": "containerPointToLatLng",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "L.Point"
                }
            ],
            "return": {
                "description": "L.LatLng"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1552,
            "description": "Projects the given geographical coordinates to absolute pixel coordinates for the given zoom level (current zoom level by default).",
            "itemtype": "method",
            "name": "project",
            "params": [
                {
                    "name": "latlng",
                    "description": "",
                    "type": "L.LatLng"
                },
                {
                    "name": "zoom",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "L.Point"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1560,
            "description": "Projects the given absolute pixel coordinates to geographical coordinates for the given zoom level (current zoom level by default).",
            "itemtype": "method",
            "name": "unproject",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "L.Point"
                },
                {
                    "name": "zoom",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "L.LatLng"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1568,
            "description": "Returns the pixel coordinates of a mouse click (relative to the top left corner of the map) given its event object.",
            "itemtype": "method",
            "name": "mouseEventToContainerPoint",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "L.MouseEvent"
                }
            ],
            "return": {
                "description": "L.Point"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1575,
            "description": "Returns the pixel coordinates of a mouse click relative to the map layer given its event object.",
            "itemtype": "method",
            "name": "mouseEventToLayerPoint",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "L.MouseEvent"
                }
            ],
            "return": {
                "description": "L.Point"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1582,
            "description": "Returns the geographical coordinates of the point the mouse clicked on given the click's event object.",
            "itemtype": "method",
            "name": "mouseEventToLatLng",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "L.MouseEvent"
                }
            ],
            "return": {
                "description": "L.LatLng"
            },
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1589,
            "description": "Fired when the map and its base layer have completed loading.",
            "itemtype": "event",
            "name": "load",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1594,
            "description": "Fired when a new layer is added to the map.",
            "itemtype": "event",
            "name": "layeradd",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1599,
            "description": "Fired when some layer is removed from the map.",
            "itemtype": "event",
            "name": "layerremove",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1604,
            "description": "Fired when the base layer is changed through the layer control.",
            "itemtype": "event",
            "name": "baselayerchange",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1609,
            "description": "Fired after the start of a drag, pan, or zoom.",
            "itemtype": "event",
            "name": "movestart",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1614,
            "description": "Fired after each drag, pan, or zoom",
            "itemtype": "event",
            "name": "move",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1619,
            "description": "Fired after a drag, pan, or zoom completes",
            "itemtype": "event",
            "name": "moveend",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1624,
            "description": "Fired after a zoom completes",
            "itemtype": "event",
            "name": "zoomend",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1629,
            "description": "Fired after a zoom completes",
            "itemtype": "event",
            "name": "zoomstart",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1634,
            "description": "Fired after mouseover the map",
            "itemtype": "event",
            "name": "mouseover",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1639,
            "description": "Fired after mouseout the map",
            "itemtype": "event",
            "name": "mouseout",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1644,
            "description": "Fired after mousemove the map",
            "itemtype": "event",
            "name": "mousemove",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1649,
            "description": "Fired when the user clicks the mouse button.",
            "itemtype": "event",
            "name": "mousedown",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1654,
            "description": "Fired when the user releases the mouse button.",
            "itemtype": "event",
            "name": "mouseup",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1659,
            "description": "Fired when the user releases the mouse button.",
            "itemtype": "event",
            "name": "click",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1664,
            "description": "Fired when the user double clicks the map.",
            "itemtype": "event",
            "name": "dblclick",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1669,
            "description": "Fired after the base layer changes",
            "itemtype": "event",
            "name": "changebaselayer",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1674,
            "description": "Fired when geolocation (using locate method) went successfully.",
            "itemtype": "event",
            "name": "locationfound",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1679,
            "description": "Fired when geolocation (using locate method) failed.",
            "itemtype": "event",
            "name": "locationerror",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1684,
            "description": "Fired when a popup is opened (using openPopup method).",
            "itemtype": "event",
            "name": "popupopen",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1689,
            "description": "Fired when a popup is closed (using closePopup method).",
            "itemtype": "event",
            "name": "popupclose",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1700,
            "description": "The name of the default marker layer.",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1705,
            "description": "The name of the traffic layer.",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1710,
            "description": "Defines the marker options for the route start point.",
            "static": 1,
            "itemtype": "property",
            "name": "MARKER_OPTIONS_ROUTE_START",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Map.js",
            "line": 1722,
            "description": "Defines the marker options for the route end point.",
            "static": 1,
            "itemtype": "property",
            "name": "MARKER_OPTIONS_ROUTE_END",
            "class": "tomtom.Map",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 90,
            "description": "Sets the context menu for this marker.\nWhen the marker is right clicked, the context menu will be displayed.",
            "params": [
                {
                    "name": "contextMenu",
                    "description": "The context menu to display when the marker is right clicked.",
                    "type": "tomtom.ContextMenu"
                }
            ],
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 114,
            "description": "Triggers an animation for the marker.",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "effect",
                    "description": "The effect to use.  Currently only dropIn, bounce and fadeIn / fadeOut are supported.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options to supply to the animation.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "duration",
                            "description": "The duration of the animation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "delay",
                            "description": "The delay before the animation starts.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "The callback to call when the animation is complete.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 150,
            "description": "Cancels the marker's current animation.",
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 165,
            "description": "Binds a popup with a particular HTML content to a click or hover on this marker. You can also open the bound popup with the Marker openPopup method.",
            "params": [
                {
                    "name": "htmlContent",
                    "description": "The content to display in the popup.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options to supply to the popup.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "showOnMouseOver",
                            "description": "If true, the popup will show on mouse over rather than click.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "maxWidth",
                            "description": "Max width of the popup.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "300"
                        },
                        {
                            "name": "minWidth",
                            "description": "Min width of the popup.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "50"
                        },
                        {
                            "name": "maxHeight",
                            "description": "If set, creates a scrollable container of the given height inside a popup if its content exceeds it.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "autoPan",
                            "description": "Set it to false if you don't want the map to do panning animation to fit the opened popup.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "closeButton",
                            "description": "Controls the presense of a close button in the popup.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "offset",
                            "description": "6)  The offset of the popup position. Useful to control the anchor of the popup when opening it on some overlays.",
                            "type": "L.Point",
                            "optional": true,
                            "optdefault": "Point(0,"
                        },
                        {
                            "name": "autoPanPadding",
                            "description": "5)  The margin between the popup and the edges of the map view after autopanning was performed.",
                            "type": "L.Point",
                            "optional": true,
                            "optdefault": "Point(5,"
                        },
                        {
                            "name": "zoomAnimation",
                            "description": "Whether to animate the popup on zoom. Disable it if you have problems with Flash content inside popups.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 275,
            "description": "Adds the marker to the map.",
            "itemtype": "method",
            "name": "addTo",
            "params": [
                {
                    "name": "map",
                    "description": "",
                    "type": "Map"
                }
            ],
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 283,
            "description": "Returns the current geographical position of the marker.",
            "itemtype": "method",
            "name": "getLatLng",
            "return": {
                "description": "LatLng"
            },
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 289,
            "description": "Changes the marker position to the given point.",
            "itemtype": "method",
            "name": "setLatLng",
            "params": [
                {
                    "name": "latlng",
                    "description": "",
                    "type": "LatLng"
                }
            ],
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 297,
            "description": "Changes the marker icon.",
            "itemtype": "method",
            "name": "setIcon",
            "params": [
                {
                    "name": "icon",
                    "description": "",
                    "type": "Icon"
                }
            ],
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 305,
            "description": "Changes the zIndex offset of the marker.",
            "itemtype": "method",
            "name": "setZIndexOffset",
            "params": [
                {
                    "name": "offset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 313,
            "description": "Changes the opacity of the marker.",
            "itemtype": "method",
            "name": "setOpacity",
            "params": [
                {
                    "name": "opacity",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 321,
            "description": "Updates the marker position, useful if coordinates of its latLng object were changed directly.",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 328,
            "description": "Binds a popup with a particular HTML content to a click on this marker. You can also open the bound popup with the Marker openPopup method.",
            "itemtype": "method",
            "name": "bindPopup",
            "params": [
                {
                    "name": "htmlContent",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "L.PopupOptions",
                    "optional": true
                }
            ],
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 337,
            "description": "Unbinds the popup previously bound to the marker with bindPopup.",
            "itemtype": "method",
            "name": "unbindPopup",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 344,
            "description": "Opens the popup previously bound by the bindPopup method.",
            "itemtype": "method",
            "name": "openPopup",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 351,
            "description": "Closes the bound popup of the marker if it's opened.",
            "itemtype": "method",
            "name": "closePopup",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\Marker.js",
            "line": 360,
            "description": "The default marker options which will be used when no options are specified for the Marker constructor.\nThe default is:\n\n tomtom.Marker.DEFAULT_MARKER_OPTIONS = {\n\t\turl: \"marker.png\",\n\t\twidth: 51,\n\t\theight: 60,\n\t\toffsetWidth: -21,\n\t\toffsetHeight: -49\n\t}",
            "itemtype": "property",
            "name": "DEFAULT_MARKER_OPTIONS",
            "type": "String",
            "static": 1,
            "class": "tomtom.Marker",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\MarkerManager.js",
            "line": 57,
            "description": "The markers which this MarkerManager manages.",
            "itemtype": "property",
            "name": "markers",
            "type": "Array",
            "class": "tomtom.MarkerManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\MarkerManager.js",
            "line": 63,
            "description": "The markers which have been removed since the last update.",
            "itemtype": "property",
            "name": "removedMarkers",
            "type": "Array",
            "class": "tomtom.MarkerManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\MarkerManager.js",
            "line": 93,
            "description": "Adds a marker to the internal list of markers that the MarkerManager manages.\nPlease note the marker will not be displayed on the map until update() has been called.",
            "itemtype": "method",
            "name": "addMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "The marker to add to the MarkerManager.",
                    "type": "tomtom.Marker"
                },
                {
                    "name": "markerId",
                    "description": "A string used to identify the marker. Although this parameter is optional,\n it is recommended in order to take full advantage of this class.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "tomtom.MarkerManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\MarkerManager.js",
            "line": 114,
            "description": "Gets a marker by the specified identifier.",
            "itemtype": "method",
            "name": "getMarkerById",
            "params": [
                {
                    "name": "markerId",
                    "description": "The identifier of the marker to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The marker whose identifier matches the specified markerId.",
                "type": "tomtom.Marker"
            },
            "class": "tomtom.MarkerManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\MarkerManager.js",
            "line": 130,
            "description": "Removes all markers from the internal collection of markers.\nPlease note these markers will not be removed from the map until update() is called.",
            "itemtype": "method",
            "name": "clearMarkers",
            "class": "tomtom.MarkerManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\MarkerManager.js",
            "line": 152,
            "description": "Removes the specified marker from the internal collection.",
            "itemtype": "method",
            "name": "removeMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "The marker to remove.",
                    "type": "tomtom.Marker"
                }
            ],
            "class": "tomtom.MarkerManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\MarkerManager.js",
            "line": 177,
            "description": "Updates the map or layer this MarkerManager is associated with to match the internal collection of markers.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "animation",
                    "description": "Specifies whether or not to animate any updated markers.",
                    "type": "Boolean"
                }
            ],
            "class": "tomtom.MarkerManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\MarkerManager.js",
            "line": 220,
            "description": "Destroys the MarkerManager and cleans up any resources it is holding on to.",
            "itemtype": "method",
            "name": "destroy",
            "class": "tomtom.MarkerManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 3,
            "description": "The Regular Expression used to match named parameters and bundle\nreferences in strings",
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 9,
            "description": "The Regular Expression used to match language and locale ids",
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 14,
            "description": "The Regular Expression used to split the plural forms",
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 19,
            "description": "Contains all localized strings used by {@link StringBundle}",
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 24,
            "description": "Contains locale rules used by {@link StringBundle}",
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 29,
            "description": "Contains the plural form rule used by {@link StringBundle}",
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 36,
            "description": "Contains the logic to obtain the proper plural form based for a specific logic.",
            "see": [
                "https://developer.mozilla.org/En/Localization_and_Plurals"
            ],
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 42,
            "description": "These are the available plural functions that give the appropriate index\nbased on the plural rule number specified. The first element is the number\nof plural forms and the second is the function to figure out the index.",
            "see": [
                "https://developer.mozilla.org/En/Localization_and_Plurals"
            ],
            "constant": "",
            "type": "Array.<Array>",
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 121,
            "description": "The plural forms / languages map",
            "constant": "",
            "type": "Object.<String, Number>",
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 181,
            "description": "Gets the Plural Form function for the language, or family, given.",
            "params": [
                {
                    "name": "id",
                    "description": "The language or family",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "Function"
            },
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 240,
            "description": "The current locale.\n\nIt is not set by default, it is the responsibility of the application\nto set this correctly.\nIf it is not set, only the global locale rules will be applied.\n\nNote that calling {@link LocaleManager#requestLocalizedStrings} can\noverride this value.",
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 252,
            "description": "Gets the current locale id.",
            "itemtype": "method",
            "name": "getLocale",
            "return": {
                "description": "The locale id (e.g. \"en_GB\")",
                "type": "String"
            },
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 261,
            "description": "Sets the current locale id.",
            "itemtype": "method",
            "name": "setLocale",
            "params": [
                {
                    "name": "locale",
                    "description": "The locale id (e.g \"en_GB\")",
                    "type": "String"
                }
            ],
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 276,
            "description": "Gets the country code",
            "itemtype": "method",
            "name": "getCountryCode",
            "return": {
                "description": "Two character country code or |null| if the current\n     locale is not valid",
                "type": "String"
            },
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 288,
            "description": "Gets the primary language subtag in accordance\nwith RFC-3066.",
            "itemtype": "method",
            "name": "getPrimarylanguage",
            "return": {
                "description": "Two character language subtag",
                "type": "String"
            },
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 298,
            "description": "Checks that the localized strings are correctly set.",
            "itemtype": "method",
            "name": "hasLocalizedStrings",
            "return": {
                "description": "|true| if the Localized strings are set, |false| otherwise.",
                "type": "Boolean"
            },
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 307,
            "description": "Sets a locale rule for a specific resources key.",
            "params": [
                {
                    "name": "locale",
                    "description": "The locale or country code for the rule.\n     To add a default rule, use |\"*\"|.",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "The resources key",
                    "type": "String"
                },
                {
                    "name": "rule",
                    "description": "The function to be executed when the |key| is\n     requested by {@link StringBundle}. It has to return a string.",
                    "type": "Function"
                }
            ],
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 355,
            "description": "Gets the property value of the object given\nresolving possible nested object.",
            "example": [
                "\n     var object = { foo : { bar : 42 } };\n\n     propertyWalker(\"foo\", object); // returns object[\"foo\"]\n     propertyWalker(\"foo.bar\", object); // returns object[\"foo\"][\"bar\"];\n     propertyWalker(\"foo.anything.bar\", object); // returns |undefined|"
            ],
            "params": [
                {
                    "name": "key",
                    "description": "The name of the object's property",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object that should contains the property given",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The value of the property",
                "type": "Object"
            },
            "class": "tomtom.LocaleManager",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 423,
            "description": "The current branch of the resources",
            "type": "Object",
            "class": "tomtom.StringBundle",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 429,
            "description": "The path key of this StringBundle",
            "type": "String",
            "class": "tomtom.StringBundle",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 435,
            "description": "The plural form rule for this StringBundle.",
            "type": "Function",
            "class": "tomtom.StringBundle",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 441,
            "description": "Gets a branch",
            "itemtype": "method",
            "name": "getBranch",
            "params": [
                {
                    "name": "branchKey",
                    "description": "The key of the branch to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a new instance of StringBundle",
                "type": "StringBundle"
            },
            "class": "tomtom.StringBundle",
            "namespace": "tomtom"
        },
        {
            "file": "src\\tomtom\\i18n.js",
            "line": 451,
            "description": "Gets a string from resources",
            "itemtype": "method",
            "name": "getString",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the string",
                    "type": "String"
                },
                {
                    "name": "namedParams",
                    "description": "The named parameters\n     to applies to the string",
                    "type": "Object.<String, String>"
                },
                {
                    "name": "count",
                    "description": "The value used in plural rules to determine\n     the plural form to use",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The value of the resource's string",
                "type": "String"
            },
            "class": "tomtom.StringBundle",
            "namespace": "tomtom"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\controls\\ContextMenu.js:215"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtil.js:126"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtil.js:396"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtil.js:425"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtil.js:443"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtil.js:460"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtil.js:510"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtil.js:525"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtil.js:551"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:25"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:50"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:75"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:104"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:113"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:133"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:148"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:171"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:182"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:194"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:205"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:217"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:229"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:240"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:250"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:260"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:270"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:279"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:290"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:301"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:312"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:322"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:337"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:519"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:613"
        },
        {
            "message": "unknown tag: getboundszoom",
            "line": " src\\tomtom\\Map.js:1461"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1510"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1517"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1524"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1531"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1538"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1545"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1552"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1560"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1568"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1575"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Map.js:1582"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:275"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:283"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:289"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:297"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:305"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:313"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:321"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:328"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:337"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:344"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\Marker.js:351"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\tomtom\\MarkerManager.js:114"
        },
        {
            "message": "unknown tag: constant",
            "line": " src\\tomtom\\i18n.js:42"
        },
        {
            "message": "unknown tag: constant",
            "line": " src\\tomtom\\i18n.js:121"
        },
        {
            "message": "Missing item type\nCreate a separate instance of the document click function.\nLeaflet's L.Util.stamp isn't very bright when creating unique identifiers for event handlers.",
            "line": " src\\tomtom\\controls\\ContextMenu.js:49"
        },
        {
            "message": "Missing item type\nA control which will display traffic incidents that are visible in the current window of the map.\nNote that if Live Traffic is not enabled on the map, this control will not function properly.",
            "line": " src\\tomtom\\controls\\TrafficIncidentListControl.js:14"
        },
        {
            "message": "Missing item type\nBase class for the framework specific DomUtil.",
            "line": " src\\tomtom\\dom\\DomUtil.js:1"
        },
        {
            "message": "Missing item type\nRemoves a class from the specified element(s).",
            "line": " src\\tomtom\\dom\\DomUtil.js:363"
        },
        {
            "message": "Missing item type\nAdds a class to the specified element(s).",
            "line": " src\\tomtom\\dom\\DomUtil.js:379"
        },
        {
            "message": "Missing item type\nDetermines if the specified element is a node list.",
            "line": " src\\tomtom\\dom\\DomUtil.js:396"
        },
        {
            "message": "Missing item type\nAttaches an event handler to the specified element(s).",
            "line": " src\\tomtom\\dom\\DomUtil.js:425"
        },
        {
            "message": "Missing item type\nDetaches an event handler from the specified element(s).",
            "line": " src\\tomtom\\dom\\DomUtil.js:443"
        },
        {
            "message": "Missing item type\nCreates a DOM Node, or wraps an existing DOM node in a DomUtilResult.",
            "line": " src\\tomtom\\dom\\DomUtil.js:460"
        },
        {
            "message": "Missing item type\nLoops through each element in the specified array or DomUtilResult.",
            "line": " src\\tomtom\\dom\\DomUtil.js:482"
        },
        {
            "message": "Missing item type\nGets the first element out of the specified Array or NodeList.",
            "line": " src\\tomtom\\dom\\DomUtil.js:510"
        },
        {
            "message": "Missing item type\nGets all of the ancestors of the specified element(s).",
            "line": " src\\tomtom\\dom\\DomUtil.js:525"
        },
        {
            "message": "Missing item type\nDetermines whether or not the specified element(s) have the specified class.",
            "line": " src\\tomtom\\dom\\DomUtil.js:551"
        },
        {
            "message": "Missing item type\nClears everything from all of the contained elements.",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:386"
        },
        {
            "message": "Missing item type\nHides all of the contained elements, setting the CSS display property to \"none\".",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:403"
        },
        {
            "message": "Missing item type\nShows all of the contained elements, setting the CSS display property to \"block\";",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:418"
        },
        {
            "message": "Missing item type\nGets all parents of all contained elements.",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:433"
        },
        {
            "message": "Missing item type\nDetermines whether or not any of the contained elements have the specified className.",
            "line": " src\\tomtom\\dom\\DomUtilResult.js:443"
        },
        {
            "message": "Missing item type\nCancels the animation and returns the elements to their original position.",
            "line": " src\\tomtom\\Animation.js:192"
        },
        {
            "message": "Missing item type\nSets the HTML content of the marker.",
            "line": " src\\tomtom\\CustomMarker.js:48"
        },
        {
            "message": "Missing item type\nThe base path for all API calls.",
            "line": " src\\tomtom\\Main.js:119"
        },
        {
            "message": "Missing item type\nThe base service path for services (everything but map tiles).",
            "line": " src\\tomtom\\Main.js:124"
        },
        {
            "message": "Missing item type\nA method that can be overridden in order to log how many calls are being made to the LBS APIs.",
            "line": " src\\tomtom\\Main.js:147"
        },
        {
            "message": "Missing item type\nThe map widget allows a user to add a map to the page.",
            "line": " src\\tomtom\\Map.js:1"
        },
        {
            "message": "Missing item type\nSets the context menu for the map.\nThe context menu will be displayed when the user right clicks the map.",
            "line": " src\\tomtom\\Map.js:528"
        },
        {
            "message": "Missing item type\nReturns the maximum zoom level on which the given bounds fit to the map view in its entirety. If inside (optional) is set to true, the method instead returns the minimum zoom level on which the map view fits into the given bounds in its entirety.",
            "line": " src\\tomtom\\Map.js:1461"
        },
        {
            "message": "Missing item type\nThe name of the default marker layer.",
            "line": " src\\tomtom\\Map.js:1700"
        },
        {
            "message": "Missing item type\nThe name of the traffic layer.",
            "line": " src\\tomtom\\Map.js:1705"
        },
        {
            "message": "Missing item type\nSets the context menu for this marker.\nWhen the marker is right clicked, the context menu will be displayed.",
            "line": " src\\tomtom\\Marker.js:90"
        },
        {
            "message": "Missing item type\nCancels the marker's current animation.",
            "line": " src\\tomtom\\Marker.js:150"
        },
        {
            "message": "Missing item type\nBinds a popup with a particular HTML content to a click or hover on this marker. You can also open the bound popup with the Marker openPopup method.",
            "line": " src\\tomtom\\Marker.js:165"
        },
        {
            "message": "Missing item type\nThe Regular Expression used to match named parameters and bundle\nreferences in strings",
            "line": " src\\tomtom\\i18n.js:3"
        },
        {
            "message": "Missing item type\nThe Regular Expression used to match language and locale ids",
            "line": " src\\tomtom\\i18n.js:9"
        },
        {
            "message": "Missing item type\nThe Regular Expression used to split the plural forms",
            "line": " src\\tomtom\\i18n.js:14"
        },
        {
            "message": "Missing item type\nContains all localized strings used by {@link StringBundle}",
            "line": " src\\tomtom\\i18n.js:19"
        },
        {
            "message": "Missing item type\nContains locale rules used by {@link StringBundle}",
            "line": " src\\tomtom\\i18n.js:24"
        },
        {
            "message": "Missing item type\nContains the plural form rule used by {@link StringBundle}",
            "line": " src\\tomtom\\i18n.js:29"
        },
        {
            "message": "Missing item type\nContains the logic to obtain the proper plural form based for a specific logic.",
            "line": " src\\tomtom\\i18n.js:36"
        },
        {
            "message": "Missing item type\nThese are the available plural functions that give the appropriate index\nbased on the plural rule number specified. The first element is the number\nof plural forms and the second is the function to figure out the index.",
            "line": " src\\tomtom\\i18n.js:42"
        },
        {
            "message": "Missing item type\nThe plural forms / languages map",
            "line": " src\\tomtom\\i18n.js:121"
        },
        {
            "message": "Missing item type\nGets the Plural Form function for the language, or family, given.",
            "line": " src\\tomtom\\i18n.js:181"
        },
        {
            "message": "Missing item type\nThe current locale.\n\nIt is not set by default, it is the responsibility of the application\nto set this correctly.\nIf it is not set, only the global locale rules will be applied.\n\nNote that calling {@link LocaleManager#requestLocalizedStrings} can\noverride this value.",
            "line": " src\\tomtom\\i18n.js:240"
        },
        {
            "message": "Missing item type\nSets a locale rule for a specific resources key.",
            "line": " src\\tomtom\\i18n.js:307"
        },
        {
            "message": "Missing item type\nGets the property value of the object given\nresolving possible nested object.",
            "line": " src\\tomtom\\i18n.js:355"
        },
        {
            "message": "Missing item type\nThe current branch of the resources",
            "line": " src\\tomtom\\i18n.js:423"
        },
        {
            "message": "Missing item type\nThe path key of this StringBundle",
            "line": " src\\tomtom\\i18n.js:429"
        },
        {
            "message": "Missing item type\nThe plural form rule for this StringBundle.",
            "line": " src\\tomtom\\i18n.js:435"
        }
    ]
}